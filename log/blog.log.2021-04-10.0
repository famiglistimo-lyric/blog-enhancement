2021-04-10 15:57:26.603  INFO 10016 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@7d662896]}
2021-04-10 15:57:31.640  WARN 10016 --- [http-nio-8080-exec-9] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@66f20539 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-04-10 15:57:36.658  WARN 10016 --- [http-nio-8080-exec-9] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@d21b9a9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-04-10 15:57:41.664  WARN 10016 --- [http-nio-8080-exec-9] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@66713641 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-04-10 15:57:46.668  WARN 10016 --- [http-nio-8080-exec-9] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@3c1904bd (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-04-10 15:57:51.678  WARN 10016 --- [http-nio-8080-exec-9] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@4d2108d2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-04-10 15:57:56.692  WARN 10016 --- [http-nio-8080-exec-9] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@77599e7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-04-10 15:57:56.696 ERROR 10016 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30060ms.
### The error may exist in file [D:\blog\lyric\target\classes\mapper\BlogMapper.xml]
### The error may involve com.yi.blog.mapper.BlogMapper.selectPageByTitleAndType
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30060ms.] with root cause

com.mysql.cj.exceptions.ConnectionIsClosedException: No operations allowed after connection closed.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.NativeSession.checkClosed(NativeSession.java:1209)
	at com.mysql.cj.jdbc.ConnectionImpl.checkClosed(ConnectionImpl.java:567)
	at com.mysql.cj.jdbc.ConnectionImpl.setNetworkTimeout(ConnectionImpl.java:2484)
	at com.zaxxer.hikari.pool.PoolBase.setNetworkTimeout(PoolBase.java:550)
	at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:165)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:179)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:155)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:128)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.prepareStatement(MybatisSimpleExecutor.java:91)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:66)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy80.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:134)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:96)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy81.selectPageByTitleAndType(Unknown Source)
	at com.yi.blog.service.impl.BlogServiceImpl.listBlog(BlogServiceImpl.java:54)
	at com.yi.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4b012ad9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:684)
	at com.yi.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$df8e35eb.listBlog(<generated>)
	at com.yi.blog.web.IndexController.index(IndexController.java:47)
	at com.yi.blog.web.IndexController$$FastClassBySpringCGLIB$$7bdf2539.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.IndexController$$EnhancerBySpringCGLIB$$dd1f328e.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-10 16:16:54.528  INFO 10016 --- [Thread-16] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-10 16:16:54.531  INFO 10016 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-10 16:16:54.535  INFO 10016 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-10 16:17:00.478  INFO 11500 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 11500 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-10 16:17:00.482 DEBUG 11500 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-10 16:17:00.482  INFO 11500 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-10 16:17:00.575  INFO 11500 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-10 16:17:00.575  INFO 11500 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-10 16:17:02.492  INFO 11500 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-04-10 16:17:02.514  INFO 11500 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-10 16:17:02.514  INFO 11500 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-10 16:17:02.629  INFO 11500 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-10 16:17:02.630  INFO 11500 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2055 ms
2021-04-10 16:17:03.071  WARN 11500 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-10 16:17:04.110  INFO 11500 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-10 16:17:04.194  INFO 11500 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-10 16:17:04.482  INFO 11500 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-10 16:17:04.529  INFO 11500 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-04-10 16:17:04.531  INFO 11500 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 4.742 seconds (JVM running for 5.811)
2021-04-10 16:17:22.040  INFO 11500 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-10 16:17:22.041  INFO 11500 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-10 16:17:22.056  INFO 11500 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2021-04-10 16:17:22.094  INFO 11500 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@4e23753e]}
2021-04-10 16:17:22.149  INFO 11500 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-10 16:17:22.490  INFO 11500 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-10 16:17:22.530 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-10 16:17:22.549 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-10 16:17:22.585 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-10 16:17:22.587 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-10 16:17:22.648 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-10 16:17:22.649 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-10 16:17:22.677 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-10 16:17:22.678 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 3
2021-04-10 16:17:22.686 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-10 16:17:22.686 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-10 16:17:22.714 DEBUG 11500 --- [http-nio-8080-exec-1] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 3
2021-04-10 16:17:22.720 DEBUG 11500 --- [http-nio-8080-exec-1] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-10 16:17:22.720 DEBUG 11500 --- [http-nio-8080-exec-1] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-10 16:17:22.743 DEBUG 11500 --- [http-nio-8080-exec-1] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 4
2021-04-10 16:17:22.779 DEBUG 11500 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:17:22.780 DEBUG 11500 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:17:22.804 DEBUG 11500 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:17:22.818 DEBUG 11500 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-10 16:17:22.821 DEBUG 11500 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 45046(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-10 16:17:22.874 DEBUG 11500 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-10 16:17:22.962  INFO 11500 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-10 16:17:23.860  INFO 11500 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-10 16:17:23.860  INFO 11500 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
2021-04-10 16:17:25.704  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/34', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-10 16:17:25.778 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:17:25.778 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:17:25.806 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:17:25.835 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:17:25.836 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-10 16:17:25.891 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:17:25.894 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:17:25.894 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:17:25.918 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:17:25.923 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:17:25.926 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 150(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 23:40:56.51(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-10 16:17:26.019 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:17:26.127  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:17:26.801  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/34', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-10 16:17:26.840 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:17:26.840 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-10 16:17:26.857 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-10 16:17:26.859  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:17:32.868  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/35', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[35, {}]}
2021-04-10 16:17:32.900 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:17:32.900 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:17:32.923 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:17:32.942 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:17:32.943 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 35(Long)
2021-04-10 16:17:32.969 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:17:32.970 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:17:32.970 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:17:32.999 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:17:33.001 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:17:33.003 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(二)(String), # Spring：AOP
#Spring产生一个bean的几个过程：
1、new
2、注入
3、init生命周期初始化方法
4、代理AOP
5、put 单例池
等等后产生bean。
第3步，init时，有三个回调方式，分别是@PostConstruct注解、实现InitializationBean接口的afterPropertiesSet()方法、xml中的init的方式。先后顺序为：@PostConstruct->afterPropertiesSet()->xml中的init
然后就是产生代理对象：如果AOP作用了某个对象，就改变了这个对象，底层是用的proxy，代理的方式。(通过applyBeanPostProcessorsAfterInitialization这个方法中的BeanPostProcessors来完成代理。)
这里就解释了二级缓存的作用：
上边那5步，假如现在创建这么一片代码，如果运行下面这行代码：
```java
getBean(OneService.class).getBean(TwoService.class)
```
按理说，OneService创建完以后，twoService并没有进行第4步，所以应该aop切不到这里，而是在第二步的时候，放入了二级缓存中，就是在此时，放进去的时候，二级缓存会做aop的处理。
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```(String), 原创(String), 17(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-04 23:42:34.043(Timestamp), 2021-04-05 14:53:28.564(Timestamp), 14(Long), 1(Long), 35(Long)
2021-04-10 16:17:33.057 DEBUG 11500 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:17:33.112  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:17:33.535  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/35', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[35, {}]}
2021-04-10 16:17:33.539 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:17:33.540 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 35(Long)
2021-04-10 16:17:33.579 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-10 16:17:33.580  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:17:36.186  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:17:36.259 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:17:36.260 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:17:36.301 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:17:36.318 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:17:36.319 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:17:36.340 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:17:36.341 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:17:36.341 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:17:36.369 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:17:36.371 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:17:36.372 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 30(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:17:36.419 DEBUG 11500 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:17:36.493  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:17:36.945  INFO 11500 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:17:36.947 DEBUG 11500 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:17:36.947 DEBUG 11500 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:17:36.980 DEBUG 11500 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 2
2021-04-10 16:17:36.982  INFO 11500 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:17:52.980  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@65841ca8, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@55a922ce]}
2021-04-10 16:17:55.517 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:17:55.518 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:17:55.542 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:17:55.546 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:17:55.548 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), asdasdasd(String), /images/1.svg(String), 2021-04-10 16:17:55.546(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:17:55.608 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:17:55.612  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:17:55.695  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:17:55.696 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:17:55.697 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:17:55.723 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 3
2021-04-10 16:17:55.723  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:18:00.161  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@732c15d8, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@55a922ce]}
2021-04-10 16:18:00.163 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:18:00.163 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:18:00.182 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:18:00.183 DEBUG 11500 --- [http-nio-8080-exec-10] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:18:00.184 DEBUG 11500 --- [http-nio-8080-exec-10] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), asdadda(String), /images/1.svg(String), 2021-04-10 16:18:00.183(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:18:00.224 DEBUG 11500 --- [http-nio-8080-exec-10] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:18:00.224  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:18:00.286  INFO 11500 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:18:00.287 DEBUG 11500 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:18:00.287 DEBUG 11500 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:18:00.306  INFO 11500 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@1c12b0f, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@6fd413e4]}
2021-04-10 16:18:00.308 DEBUG 11500 --- [http-nio-8080-exec-3] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:18:00.309 DEBUG 11500 --- [http-nio-8080-exec-3] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:18:00.312 DEBUG 11500 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 4
2021-04-10 16:18:00.312  INFO 11500 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:18:00.333 DEBUG 11500 --- [http-nio-8080-exec-3] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:18:00.334 DEBUG 11500 --- [http-nio-8080-exec-3] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:18:00.335 DEBUG 11500 --- [http-nio-8080-exec-3] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), asdadda(String), /images/1.svg(String), 2021-04-10 16:18:00.333(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:18:00.384 DEBUG 11500 --- [http-nio-8080-exec-3] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:18:00.384  INFO 11500 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:18:00.445  INFO 11500 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:18:00.447 DEBUG 11500 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:18:00.447 DEBUG 11500 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:18:00.475 DEBUG 11500 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 5
2021-04-10 16:18:00.476  INFO 11500 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:18:04.107  INFO 11500 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@43e37e1, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@6fd413e4]}
2021-04-10 16:18:04.109 DEBUG 11500 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:18:04.109 DEBUG 11500 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:18:04.133 DEBUG 11500 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:18:04.134 DEBUG 11500 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:18:04.135 DEBUG 11500 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), dadsadasdasda(String), /images/1.svg(String), 2021-04-10 16:18:04.134(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:18:04.173 DEBUG 11500 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:18:04.174  INFO 11500 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:18:04.238  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@55031758, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@55a922ce]}
2021-04-10 16:18:04.239 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:18:04.239 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:18:04.247  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:18:04.249 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:18:04.249 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:18:04.257 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:18:04.258 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:18:04.259 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), dadsadasdasda(String), /images/1.svg(String), 2021-04-10 16:18:04.258(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:18:04.271 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:18:04.272  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:18:04.303 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:18:04.304  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:18:04.373  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:18:04.375 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:18:04.375 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:18:04.399 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 7
2021-04-10 16:18:04.399  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:19:41.846  INFO 11500 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@16dae358, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@55a922ce]}
2021-04-10 16:19:41.848 DEBUG 11500 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:19:41.848 DEBUG 11500 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:19:41.877 DEBUG 11500 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:19:41.879 DEBUG 11500 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:19:41.879 DEBUG 11500 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), asfdfafas(String), /images/1.svg(String), 2021-04-10 16:19:41.878(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:19:41.932 DEBUG 11500 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:19:41.933  INFO 11500 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:19:41.944  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@7900744a, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@6fd413e4]}
2021-04-10 16:19:41.947 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:19:41.947 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:19:41.966 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:19:41.967 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:19:41.968 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), asfdfafas(String), /images/1.svg(String), 2021-04-10 16:19:41.966(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:19:42.010  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:19:42.012 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:19:42.012 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:19:42.021 DEBUG 11500 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:19:42.022  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:19:42.030 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 8
2021-04-10 16:19:42.030  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:19:42.073  INFO 11500 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@7eae0922, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@2130516c]}
2021-04-10 16:19:42.075 DEBUG 11500 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:19:42.075 DEBUG 11500 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:19:42.089  INFO 11500 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:19:42.092 DEBUG 11500 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:19:42.093 DEBUG 11500 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:19:42.104 DEBUG 11500 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:19:42.106 DEBUG 11500 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:19:42.107 DEBUG 11500 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), asfdfafas(String), /images/1.svg(String), 2021-04-10 16:19:42.105(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:19:42.117 DEBUG 11500 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 9
2021-04-10 16:19:42.117  INFO 11500 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:19:42.149 DEBUG 11500 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:19:42.149  INFO 11500 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:19:42.209  INFO 11500 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:19:42.211 DEBUG 11500 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:19:42.211 DEBUG 11500 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:19:42.236 DEBUG 11500 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 10
2021-04-10 16:19:42.237  INFO 11500 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:19:47.036  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@5a06201f, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@2130516c]}
2021-04-10 16:19:47.037 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:19:47.038 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:19:47.056 DEBUG 11500 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:19:47.057 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:19:47.058 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), asdasaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(String), /images/1.svg(String), 2021-04-10 16:19:47.057(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:19:47.116 DEBUG 11500 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:19:47.116  INFO 11500 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:19:47.181  INFO 11500 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@76e14855, org.apache.catalina.session.StandardSessionFacade@e526716, org.apache.catalina.connector.RequestFacade@6fd413e4]}
2021-04-10 16:19:47.181 DEBUG 11500 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:19:47.183 DEBUG 11500 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:19:47.194  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:19:47.196 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:19:47.196 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:19:47.205 DEBUG 11500 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:19:47.207 DEBUG 11500 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:19:47.207 DEBUG 11500 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: asdas(String), lyric0926@163.com(String), asdasaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(String), /images/1.svg(String), 2021-04-10 16:19:47.207(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:19:47.219 DEBUG 11500 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 11
2021-04-10 16:19:47.220  INFO 11500 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:19:47.260 DEBUG 11500 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:19:47.261  INFO 11500 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:19:47.339  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:19:47.340 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:19:47.340 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:19:47.370 DEBUG 11500 --- [http-nio-8080-exec-4] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 12
2021-04-10 16:19:47.371  INFO 11500 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:31:56.274  INFO 11500 --- [Thread-16] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-10 16:31:56.275  INFO 11500 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-10 16:31:56.281  INFO 11500 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-10 16:32:00.429  INFO 24436 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 24436 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-10 16:32:00.433 DEBUG 24436 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-10 16:32:00.434  INFO 24436 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-10 16:32:00.518  INFO 24436 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-10 16:32:00.519  INFO 24436 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-10 16:32:01.867  INFO 24436 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-04-10 16:32:01.884  INFO 24436 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-10 16:32:01.885  INFO 24436 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-10 16:32:01.983  INFO 24436 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-10 16:32:01.983  INFO 24436 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1464 ms
2021-04-10 16:32:02.354  WARN 24436 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-10 16:32:03.275  INFO 24436 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-10 16:32:03.356  INFO 24436 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-10 16:32:03.637  INFO 24436 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-10 16:32:03.685  INFO 24436 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-04-10 16:32:03.688  INFO 24436 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 3.806 seconds (JVM running for 4.673)
2021-04-10 16:32:11.410  INFO 24436 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-10 16:32:11.410  INFO 24436 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-10 16:32:11.420  INFO 24436 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2021-04-10 16:32:11.462  INFO 24436 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:32:11.529  INFO 24436 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-10 16:32:11.909  INFO 24436 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-10 16:32:11.916 DEBUG 24436 --- [http-nio-8080-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:32:11.934 DEBUG 24436 --- [http-nio-8080-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:32:11.972 DEBUG 24436 --- [http-nio-8080-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:32:12.008 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:32:12.008 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:32:12.033 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:32:12.036 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:32:12.036 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:32:12.066 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:32:12.072 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:32:12.075 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 31(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:32:12.125 DEBUG 24436 --- [http-nio-8080-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:32:12.241  INFO 24436 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:32:12.921  INFO 24436 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:32:12.956 DEBUG 24436 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:32:12.957 DEBUG 24436 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:32:12.985 DEBUG 24436 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-10 16:32:12.987  INFO 24436 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:32:31.367  INFO 24436 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@724bebd8, org.apache.catalina.session.StandardSessionFacade@3fe9579b, org.apache.catalina.connector.RequestFacade@77c5a15e]}
2021-04-10 16:32:45.291 DEBUG 24436 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:32:45.291 DEBUG 24436 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:32:45.321 DEBUG 24436 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:32:45.326 DEBUG 24436 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:32:45.326 DEBUG 24436 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), 啊啊啊啊啊(String), /images/1.svg(String), 2021-04-10 16:32:45.325(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:32:45.373 DEBUG 24436 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:32:45.376  INFO 24436 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:32:45.469  INFO 24436 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:32:45.471 DEBUG 24436 --- [http-nio-8080-exec-7] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:32:45.471 DEBUG 24436 --- [http-nio-8080-exec-7] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:32:45.500 DEBUG 24436 --- [http-nio-8080-exec-7] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 1
2021-04-10 16:32:45.501  INFO 24436 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:36:43.894  INFO 24436 --- [Thread-16] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-10 16:36:43.895  INFO 24436 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-10 16:36:43.899  INFO 24436 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-10 16:36:47.720  INFO 22516 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 22516 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-10 16:36:47.724 DEBUG 22516 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-10 16:36:47.725  INFO 22516 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-10 16:36:47.803  INFO 22516 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-10 16:36:47.803  INFO 22516 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-10 16:36:49.101  INFO 22516 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-04-10 16:36:49.119  INFO 22516 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-10 16:36:49.119  INFO 22516 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-10 16:36:49.218  INFO 22516 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-10 16:36:49.218  INFO 22516 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1414 ms
2021-04-10 16:36:49.580  WARN 22516 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-10 16:36:50.511  INFO 22516 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-10 16:36:50.604  INFO 22516 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-10 16:36:50.881  INFO 22516 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-10 16:36:50.930  INFO 22516 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-04-10 16:36:50.933  INFO 22516 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 3.667 seconds (JVM running for 4.505)
2021-04-10 16:36:54.407  INFO 22516 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-10 16:36:54.407  INFO 22516 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-10 16:36:54.419  INFO 22516 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2021-04-10 16:36:54.478  INFO 22516 --- [http-nio-8080-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-10 16:36:54.803  INFO 22516 --- [http-nio-8080-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-10 16:36:54.839  INFO 22516 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@478139d2, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@4fa40bb9]}
2021-04-10 16:36:54.905 DEBUG 22516 --- [http-nio-8080-exec-3] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:36:54.922 DEBUG 22516 --- [http-nio-8080-exec-3] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:36:54.961 DEBUG 22516 --- [http-nio-8080-exec-3] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:36:54.972 DEBUG 22516 --- [http-nio-8080-exec-3] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:36:54.974 DEBUG 22516 --- [http-nio-8080-exec-3] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), adasdasadsasdasdasda(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:36:54 CST 2021(String), 2021-04-10 16:36:54.972(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:36:55.000  INFO 22516 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@42481dd2, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@74a9bff]}
2021-04-10 16:36:55.003 DEBUG 22516 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:36:55.003 DEBUG 22516 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:36:55.016 DEBUG 22516 --- [http-nio-8080-exec-3] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:36:55.018  INFO 22516 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:36:55.027 DEBUG 22516 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:36:55.029 DEBUG 22516 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:36:55.030 DEBUG 22516 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), adasdasadsasdasdasda(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021(String), 2021-04-10 16:36:55.028(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:36:55.084 DEBUG 22516 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:36:55.084  INFO 22516 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:36:55.112  INFO 22516 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@6c46a285, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@29443169]}
2021-04-10 16:36:55.114 DEBUG 22516 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:36:55.114 DEBUG 22516 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:36:55.144 DEBUG 22516 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:36:55.146 DEBUG 22516 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:36:55.147 DEBUG 22516 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), adasdasadsasdasdasda(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021(String), 2021-04-10 16:36:55.145(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:36:55.161  INFO 22516 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:36:55.173  INFO 22516 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@3f641f10, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@38571911]}
2021-04-10 16:36:55.174 DEBUG 22516 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:36:55.175 DEBUG 22516 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:36:55.181  INFO 22516 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@37123be3, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@7210b365]}
2021-04-10 16:36:55.183 DEBUG 22516 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:36:55.183 DEBUG 22516 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:36:55.202 DEBUG 22516 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:36:55.203 DEBUG 22516 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:36:55.204 DEBUG 22516 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), adasdasadsasdasdasda(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021(String), 2021-04-10 16:36:55.203(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:36:55.207 DEBUG 22516 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:36:55.209 DEBUG 22516 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:36:55.210 DEBUG 22516 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), adasdasadsasdasdasda(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021(String), 2021-04-10 16:36:55.208(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:36:55.327 ERROR 22516 --- [http-nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
### The error may exist in com/yi/blog/mapper/CommentMapper.java (best guess)
### The error may involve com.yi.blog.mapper.CommentMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO comment  ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment )  VALUES  ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
; Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'] with root cause

java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy80.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:60)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy91.insert(Unknown Source)
	at com.yi.blog.service.impl.CommentServiceImpl.saveComment(CommentServiceImpl.java:60)
	at com.yi.blog.service.impl.CommentServiceImpl$$FastClassBySpringCGLIB$$b39a1f70.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.CommentServiceImpl$$EnhancerBySpringCGLIB$$6a6c781a.saveComment(<generated>)
	at com.yi.blog.web.CommentController.post(CommentController.java:77)
	at com.yi.blog.web.CommentController$$FastClassBySpringCGLIB$$3b33ffc6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.CommentController$$EnhancerBySpringCGLIB$$b3c2f332.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-10 16:36:55.340  INFO 22516 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@2ad10c8a, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@67b42489]}
2021-04-10 16:36:55.343 DEBUG 22516 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:36:55.343 DEBUG 22516 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:36:55.356 DEBUG 22516 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,ip_and_time,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:36:55.357 DEBUG 22516 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:36:55.356 ERROR 22516 --- [http-nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
### The error may exist in com/yi/blog/mapper/CommentMapper.java (best guess)
### The error may involve com.yi.blog.mapper.CommentMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO comment  ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment )  VALUES  ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
; Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'] with root cause

java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy80.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:60)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy91.insert(Unknown Source)
	at com.yi.blog.service.impl.CommentServiceImpl.saveComment(CommentServiceImpl.java:60)
	at com.yi.blog.service.impl.CommentServiceImpl$$FastClassBySpringCGLIB$$b39a1f70.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.CommentServiceImpl$$EnhancerBySpringCGLIB$$6a6c781a.saveComment(<generated>)
	at com.yi.blog.web.CommentController.post(CommentController.java:77)
	at com.yi.blog.web.CommentController$$FastClassBySpringCGLIB$$3b33ffc6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.CommentController$$EnhancerBySpringCGLIB$$b3c2f332.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-10 16:36:55.361 DEBUG 22516 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:36:55.363 DEBUG 22516 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:36:55.364 DEBUG 22516 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), adasdasadsasdasdasda(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021(String), 2021-04-10 16:36:55.363(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:36:55.370  INFO 22516 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@2209991b, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@4fa40bb9]}
2021-04-10 16:36:55.371 ERROR 22516 --- [http-nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
### The error may exist in com/yi/blog/mapper/CommentMapper.java (best guess)
### The error may involve com.yi.blog.mapper.CommentMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO comment  ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment )  VALUES  ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
; Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'] with root cause

java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy80.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:60)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy91.insert(Unknown Source)
	at com.yi.blog.service.impl.CommentServiceImpl.saveComment(CommentServiceImpl.java:60)
	at com.yi.blog.service.impl.CommentServiceImpl$$FastClassBySpringCGLIB$$b39a1f70.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.CommentServiceImpl$$EnhancerBySpringCGLIB$$6a6c781a.saveComment(<generated>)
	at com.yi.blog.web.CommentController.post(CommentController.java:77)
	at com.yi.blog.web.CommentController$$FastClassBySpringCGLIB$$3b33ffc6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.CommentController$$EnhancerBySpringCGLIB$$b3c2f332.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-10 16:36:55.373 DEBUG 22516 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:36:55.375 DEBUG 22516 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:36:55.384 DEBUG 22516 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 3
2021-04-10 16:36:55.386  INFO 22516 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:36:55.398 DEBUG 22516 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:36:55.399 DEBUG 22516 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:36:55.400 DEBUG 22516 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), adasdasadsasdasdasda(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021(String), 2021-04-10 16:36:55.398(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:36:55.502 ERROR 22516 --- [http-nio-8080-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
### The error may exist in com/yi/blog/mapper/CommentMapper.java (best guess)
### The error may involve com.yi.blog.mapper.CommentMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO comment  ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment )  VALUES  ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
; Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'] with root cause

java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy80.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:60)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy91.insert(Unknown Source)
	at com.yi.blog.service.impl.CommentServiceImpl.saveComment(CommentServiceImpl.java:60)
	at com.yi.blog.service.impl.CommentServiceImpl$$FastClassBySpringCGLIB$$b39a1f70.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.CommentServiceImpl$$EnhancerBySpringCGLIB$$6a6c781a.saveComment(<generated>)
	at com.yi.blog.web.CommentController.post(CommentController.java:77)
	at com.yi.blog.web.CommentController$$FastClassBySpringCGLIB$$3b33ffc6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.CommentController$$EnhancerBySpringCGLIB$$b3c2f332.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-10 16:36:55.532 ERROR 22516 --- [http-nio-8080-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
### The error may exist in com/yi/blog/mapper/CommentMapper.java (best guess)
### The error may involve com.yi.blog.mapper.CommentMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO comment  ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment )  VALUES  ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
; Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'] with root cause

java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:36:55 CST 2021' for key 'comment.ipAndTimeIndex'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy80.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:60)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy91.insert(Unknown Source)
	at com.yi.blog.service.impl.CommentServiceImpl.saveComment(CommentServiceImpl.java:60)
	at com.yi.blog.service.impl.CommentServiceImpl$$FastClassBySpringCGLIB$$b39a1f70.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.CommentServiceImpl$$EnhancerBySpringCGLIB$$6a6c781a.saveComment(<generated>)
	at com.yi.blog.web.CommentController.post(CommentController.java:77)
	at com.yi.blog.web.CommentController$$FastClassBySpringCGLIB$$3b33ffc6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.CommentController$$EnhancerBySpringCGLIB$$b3c2f332.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-10 16:36:55.631  INFO 22516 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:36:55.633 DEBUG 22516 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,ip_and_time,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:36:55.634 DEBUG 22516 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:36:55.658 DEBUG 22516 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 3
2021-04-10 16:36:55.660  INFO 22516 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:37:21.538  INFO 22516 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@7898cd9, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@74a9bff]}
2021-04-10 16:37:21.539 DEBUG 22516 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:37:21.540 DEBUG 22516 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:37:21.561 DEBUG 22516 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:37:21.562 DEBUG 22516 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:37:21.563 DEBUG 22516 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), asdasdasdasds(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:37:21 CST 2021(String), 2021-04-10 16:37:21.562(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:37:21.604 DEBUG 22516 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:37:21.605  INFO 22516 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:37:21.669  INFO 22516 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@6afa5080, org.apache.catalina.session.StandardSessionFacade@3d2d2f7f, org.apache.catalina.connector.RequestFacade@4fa40bb9]}
2021-04-10 16:37:21.671 DEBUG 22516 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:37:21.671 DEBUG 22516 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:37:21.684  INFO 22516 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:37:21.685 DEBUG 22516 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,ip_and_time,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:37:21.686 DEBUG 22516 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:37:21.694 DEBUG 22516 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:37:21.696 DEBUG 22516 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:37:21.697 DEBUG 22516 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), asdasdasdasds(String), /images/1.svg(String), 0:0:0:0:0:0:0:1Sat Apr 10 16:37:21 CST 2021(String), 2021-04-10 16:37:21.695(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:37:21.711 DEBUG 22516 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 4
2021-04-10 16:37:21.711  INFO 22516 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:37:21.816 ERROR 22516 --- [http-nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:37:21 CST 2021' for key 'comment.ipAndTimeIndex'
### The error may exist in com/yi/blog/mapper/CommentMapper.java (best guess)
### The error may involve com.yi.blog.mapper.CommentMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO comment  ( nickname, email, content, avatar, ip_and_time, create_time, blog_id, parent_comment_id, manager_comment )  VALUES  ( ?, ?, ?, ?, ?, ?, ?, ?, ? )
### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:37:21 CST 2021' for key 'comment.ipAndTimeIndex'
; Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:37:21 CST 2021' for key 'comment.ipAndTimeIndex'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:37:21 CST 2021' for key 'comment.ipAndTimeIndex'] with root cause

java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '0:0:0:0:0:0:0:1Sat Apr 10 16:37:21 CST 2021' for key 'comment.ipAndTimeIndex'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor100.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy80.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:60)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy91.insert(Unknown Source)
	at com.yi.blog.service.impl.CommentServiceImpl.saveComment(CommentServiceImpl.java:60)
	at com.yi.blog.service.impl.CommentServiceImpl$$FastClassBySpringCGLIB$$b39a1f70.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.CommentServiceImpl$$EnhancerBySpringCGLIB$$6a6c781a.saveComment(<generated>)
	at com.yi.blog.web.CommentController.post(CommentController.java:77)
	at com.yi.blog.web.CommentController$$FastClassBySpringCGLIB$$3b33ffc6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.CommentController$$EnhancerBySpringCGLIB$$b3c2f332.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-10 16:43:15.864  INFO 22516 --- [Thread-16] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-10 16:43:15.865  INFO 22516 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-10 16:43:15.871  INFO 22516 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-10 16:43:19.171  INFO 20788 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 20788 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-10 16:43:19.174 DEBUG 20788 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-10 16:43:19.175  INFO 20788 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-10 16:43:19.263  INFO 20788 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-10 16:43:19.263  INFO 20788 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-10 16:43:21.927  INFO 20788 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2021-04-10 16:43:21.954  INFO 20788 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-10 16:43:21.954  INFO 20788 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-10 16:43:22.076  INFO 20788 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-10 16:43:22.076  INFO 20788 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2813 ms
2021-04-10 16:43:22.740  WARN 20788 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-10 16:43:23.875  INFO 20788 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-10 16:43:23.977  INFO 20788 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-10 16:43:24.266  INFO 20788 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-10 16:43:24.318  INFO 20788 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2021-04-10 16:43:24.321  INFO 20788 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 5.845 seconds (JVM running for 6.869)
2021-04-10 16:43:33.608  INFO 20788 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-10 16:43:33.608  INFO 20788 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-10 16:43:33.621  INFO 20788 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2021-04-10 16:43:33.681  INFO 20788 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-10 16:43:34.063  INFO 20788 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-10 16:43:34.103  INFO 20788 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@6f8f814a, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@3f59085]}
2021-04-10 16:43:34.169 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:43:34.189 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:43:34.228 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:43:34.239 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:43:34.241 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), 啊实打实大苏打(String), /images/1.svg(String), 2021-04-10 16:43:34.238(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:43:34.328 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:43:34.330  INFO 20788 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:43:34.438  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:43:34.441 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:43:34.442 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:43:34.467 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 1
2021-04-10 16:43:34.468  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:43:37.429  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@7e317e8e, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@3f59085]}
2021-04-10 16:43:37.432 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:43:37.433 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:43:37.471 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:43:37.472 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:43:37.473 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), 啊实打实大苏打(String), /images/1.svg(String), 2021-04-10 16:43:37.472(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:43:37.524 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:43:37.524  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:43:37.599  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:43:37.601 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:43:37.601 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:43:37.622 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 2
2021-04-10 16:43:37.623  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:43:40.529  INFO 20788 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@1d494407, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@3f59085]}
2021-04-10 16:43:40.531 DEBUG 20788 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:43:40.531 DEBUG 20788 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:43:40.551 DEBUG 20788 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:43:40.552 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:43:40.553 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), 啊实打实打算大苏打(String), /images/1.svg(String), 2021-04-10 16:43:40.552(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:43:40.609 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:43:40.610  INFO 20788 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:43:40.679  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:43:40.681 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:43:40.681 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:43:40.701 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 3
2021-04-10 16:43:40.701  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:47:06.428  INFO 20788 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@2c4c3729, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@3f59085]}
2021-04-10 16:47:06.430 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:47:06.431 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:47:06.458 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:47:06.460 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:47:06.461 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), 啊撒撒发生发生法发撒是否哎神(String), /images/1.svg(String), 2021-04-10 16:47:06.46(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:47:06.502 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:47:06.502  INFO 20788 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:47:06.583  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:47:06.585 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:47:06.585 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:47:06.608 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 4
2021-04-10 16:47:06.609  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:47:08.726  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@b00052, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@3f59085]}
2021-04-10 16:47:08.727 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:47:08.727 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:47:08.750 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:47:08.751 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:47:08.752 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), 啊萨达萨达(String), /images/1.svg(String), 2021-04-10 16:47:08.751(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:47:08.795 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:47:08.796  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:47:08.872  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:47:08.874 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:47:08.874 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:47:08.906 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 5
2021-04-10 16:47:08.907  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:47:11.739  INFO 20788 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@642517b5, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@3f59085]}
2021-04-10 16:47:11.742 DEBUG 20788 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:47:11.742 DEBUG 20788 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:47:11.775 DEBUG 20788 --- [http-nio-8080-exec-7] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:47:11.777 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:47:11.778 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: 啊啊啊啊啊(String), lyric0926@163.com(String), 啊实打实大大(String), /images/1.svg(String), 2021-04-10 16:47:11.776(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:47:11.819 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:47:11.820  INFO 20788 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:47:11.884  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:47:11.886 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:47:11.886 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:47:11.917 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:47:11.917  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:47:31.212  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:47:31.267 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:47:31.267 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:47:31.306 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:47:31.350 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:47:31.351 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:47:31.379 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:47:31.382 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:47:31.382 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:47:31.407 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:47:31.416 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:47:31.418 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 32(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:47:31.479 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:47:31.620  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:47:32.346  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:47:32.382 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:47:32.383 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:47:32.410 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:47:32.413  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:47:49.608  INFO 20788 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:47:49.638 DEBUG 20788 --- [http-nio-8080-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:47:49.639 DEBUG 20788 --- [http-nio-8080-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:47:49.664 DEBUG 20788 --- [http-nio-8080-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:47:49.685 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:47:49.686 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:47:49.715 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:47:49.717 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:47:49.718 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:47:49.743 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:47:49.746 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:47:49.749 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 33(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:47:49.806 DEBUG 20788 --- [http-nio-8080-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:47:49.871  INFO 20788 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:47:50.557  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:47:50.645 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:47:50.646 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:47:50.675 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:47:50.676  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:48:09.097  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:48:09.160 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:48:09.160 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:48:09.185 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:48:09.204 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:48:09.205 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:48:09.242 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:48:09.244 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:48:09.245 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:48:09.275 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:48:09.277 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:48:09.279 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 34(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:48:09.347 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:48:09.409  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:48:09.979  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:48:10.065 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:48:10.066 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:48:10.095 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:48:10.096  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:48:27.682  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:48:27.767 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:48:27.768 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:48:27.802 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:48:27.829 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:48:27.829 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:48:27.853 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:48:27.854 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:48:27.855 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:48:27.882 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:48:27.884 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:48:27.886 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 35(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:48:27.935 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:48:28.022  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:48:28.569  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:48:28.627 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:48:28.628 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:48:28.647 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:48:28.648  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:48:47.374  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:48:47.418 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:48:47.419 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:48:47.454 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:48:47.479 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:48:47.479 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:48:47.518 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:48:47.519 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:48:47.520 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:48:47.551 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:48:47.553 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:48:47.554 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 36(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:48:47.614 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:48:47.678  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:48:48.232  INFO 20788 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:48:48.292 DEBUG 20788 --- [http-nio-8080-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:48:48.293 DEBUG 20788 --- [http-nio-8080-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:48:48.314 DEBUG 20788 --- [http-nio-8080-exec-4] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:48:48.314  INFO 20788 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:48:56.561  INFO 20788 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:48:56.584 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:48:56.584 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:48:56.642 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:48:56.672 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:48:56.673 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:48:56.696 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:48:56.697 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:48:56.697 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:48:56.730 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:48:56.731 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:48:56.733 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 37(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:48:56.797 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:48:56.900  INFO 20788 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:48:57.338  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:48:57.340 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:48:57.341 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:48:57.375 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:48:57.375  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:49:24.496  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:49:24.537 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:49:24.538 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:49:24.562 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:49:24.586 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:49:24.586 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:49:24.608 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:49:24.609 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:49:24.610 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:49:24.639 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:49:24.641 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:49:24.642 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 38(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:49:24.699 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:49:24.776  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:49:25.493  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:49:25.531 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:49:25.532 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:49:25.566 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:49:25.567  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:50:18.485  INFO 20788 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:50:18.516 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:50:18.517 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:50:18.545 DEBUG 20788 --- [http-nio-8080-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:50:18.571 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:50:18.571 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:50:18.594 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:50:18.596 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:50:18.596 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:50:18.623 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:50:18.625 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:50:18.633 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 39(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:50:18.700 DEBUG 20788 --- [http-nio-8080-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:50:18.771  INFO 20788 --- [http-nio-8080-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:50:19.538  INFO 20788 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:50:19.561 DEBUG 20788 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:50:19.562 DEBUG 20788 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:50:19.581 DEBUG 20788 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:50:19.582  INFO 20788 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:51:08.296  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:51:08.320 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:51:08.321 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:51:08.346 DEBUG 20788 --- [http-nio-8080-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:51:08.372 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:51:08.373 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:51:08.401 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:51:08.403 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:51:08.403 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:51:08.431 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:51:08.434 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:51:08.435 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 40(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:51:08.500 DEBUG 20788 --- [http-nio-8080-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:51:08.593  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:51:23.317  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:51:23.380 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:51:23.381 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:51:23.417 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:51:23.450 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:51:23.450 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:51:23.473 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:51:23.474 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:51:23.474 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:51:23.497 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:51:23.499 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:51:23.501 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 41(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:51:23.552 DEBUG 20788 --- [http-nio-8080-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:51:23.621  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:51:26.348  INFO 20788 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:51:26.403 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:51:26.403 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:51:26.423 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:51:26.423  INFO 20788 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:10.225  INFO 20788 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:52:10.246 DEBUG 20788 --- [http-nio-8080-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:52:10.246 DEBUG 20788 --- [http-nio-8080-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:52:10.268 DEBUG 20788 --- [http-nio-8080-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:52:10.303 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:52:10.304 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:52:10.331 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:52:10.332 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:52:10.332 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:52:10.356 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:52:10.359 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:52:10.360 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 42(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:52:10.415 DEBUG 20788 --- [http-nio-8080-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:52:10.477  INFO 20788 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:52:24.938  INFO 20788 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:24.973 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:24.973 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:24.992  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@122be6ce, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@29b2b2a1]}
2021-04-10 16:52:24.993 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:52:24.993 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:52:24.998 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 6
2021-04-10 16:52:24.999  INFO 20788 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:25.022 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:52:25.023 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:52:25.024 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: adasd(String), lyric0926@163.com(String), adasddd(String), /images/1.svg(String), 2021-04-10 16:52:25.023(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:52:25.078 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:52:25.078  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:52:25.153  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:25.154 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:25.154 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:25.189 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 7
2021-04-10 16:52:25.189  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:28.816  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:28.888 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:28.888 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:28.912  INFO 20788 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@7fa8f2a, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@29b2b2a1]}
2021-04-10 16:52:28.913 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:52:28.914 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:52:28.923 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 7
2021-04-10 16:52:28.923  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:28.929  INFO 20788 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:28.936 DEBUG 20788 --- [http-nio-8080-exec-1] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:52:28.938 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:52:28.938 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: adasd(String), lyric0926@163.com(String), asdasdasdasdasdads(String), /images/1.svg(String), 2021-04-10 16:52:28.937(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:52:28.957  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@95563e3, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@5944d004]}
2021-04-10 16:52:28.957 DEBUG 20788 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:28.957 DEBUG 20788 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:28.958 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:52:28.958 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:52:28.979 DEBUG 20788 --- [http-nio-8080-exec-9] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 7
2021-04-10 16:52:28.979  INFO 20788 --- [http-nio-8080-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:28.985 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:52:28.986 DEBUG 20788 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:52:28.986 DEBUG 20788 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: adasd(String), lyric0926@163.com(String), asdasdasdasdasdads(String), /images/1.svg(String), 2021-04-10 16:52:28.985(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:52:28.988 DEBUG 20788 --- [http-nio-8080-exec-1] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:52:28.988  INFO 20788 --- [http-nio-8080-exec-1] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:52:29.031 DEBUG 20788 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:52:29.031  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:52:29.057  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:29.081  INFO 20788 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@587cab9b, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@7684425c]}
2021-04-10 16:52:29.082 DEBUG 20788 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:52:29.083 DEBUG 20788 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:52:29.088 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:29.088 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:29.102 DEBUG 20788 --- [http-nio-8080-exec-4] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:52:29.103 DEBUG 20788 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:52:29.104 DEBUG 20788 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: adasd(String), lyric0926@163.com(String), asdasdasdasdasdads(String), /images/1.svg(String), 2021-04-10 16:52:29.103(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:52:29.117 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 9
2021-04-10 16:52:29.118  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:29.122  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:29.123 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:29.124 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:29.149 DEBUG 20788 --- [http-nio-8080-exec-4] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:52:29.150  INFO 20788 --- [http-nio-8080-exec-4] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:52:29.160 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 9
2021-04-10 16:52:29.160  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:29.164  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:29.166 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:29.167 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:29.189 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 10
2021-04-10 16:52:29.190  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:29.231  INFO 20788 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:29.233 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:29.233 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:29.257 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 10
2021-04-10 16:52:29.257  INFO 20788 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:37.404  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:37.453 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:37.453 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:37.468  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@98c24ed, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@7684425c]}
2021-04-10 16:52:37.470 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:52:37.470 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:52:37.478 DEBUG 20788 --- [http-nio-8080-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 10
2021-04-10 16:52:37.479  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:37.487 DEBUG 20788 --- [http-nio-8080-exec-2] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:52:37.488 DEBUG 20788 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:52:37.489 DEBUG 20788 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: adasd(String), lyric0926@163.com(String), asdasdadasdssssssssssssssssssssssssssssssssssssssssssssssssssssssss(String), /images/1.svg(String), 2021-04-10 16:52:37.488(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:52:37.538 DEBUG 20788 --- [http-nio-8080-exec-2] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:52:37.538  INFO 20788 --- [http-nio-8080-exec-2] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:52:37.549  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:37.574 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:37.574 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:37.588  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.post', args=[com.yi.blog.entity.Comment@3a569078, org.apache.catalina.session.StandardSessionFacade@5279dc9a, org.apache.catalina.connector.RequestFacade@3f59085]}
2021-04-10 16:52:37.590 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==>  Preparing: SELECT id,avatar,user_key,create_time,update_time FROM random_avatar WHERE (user_key = ?) 
2021-04-10 16:52:37.590 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : ==> Parameters: 84f5b13a-7028-46cd-a3c3-1710fb42252d(String)
2021-04-10 16:52:37.594 DEBUG 20788 --- [http-nio-8080-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 11
2021-04-10 16:52:37.595  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:37.603  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:37.604 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:37.604 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:37.608 DEBUG 20788 --- [http-nio-8080-exec-5] c.y.b.m.RandomAvatarMapper.selectOne     : <==      Total: 1
2021-04-10 16:52:37.609 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==>  Preparing: INSERT INTO comment ( nickname, email, content, avatar, create_time, blog_id, parent_comment_id, manager_comment ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2021-04-10 16:52:37.610 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : ==> Parameters: adasd(String), lyric0926@163.com(String), asdasdadasdssssssssssssssssssssssssssssssssssssssssssssssssssssssss(String), /images/1.svg(String), 2021-04-10 16:52:37.609(Timestamp), 36(Long), 0(Long), false(Boolean)
2021-04-10 16:52:37.623 DEBUG 20788 --- [http-nio-8080-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 11
2021-04-10 16:52:37.624  INFO 20788 --- [http-nio-8080-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:37.653 DEBUG 20788 --- [http-nio-8080-exec-5] com.yi.blog.mapper.CommentMapper.insert  : <==    Updates: 1
2021-04-10 16:52:37.653  INFO 20788 --- [http-nio-8080-exec-5] com.yi.blog.aspect.LogAspect             : Result:redirect:/comments/36
2021-04-10 16:52:37.724  INFO 20788 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/comments/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.CommentController.comments', args=[36, {}]}
2021-04-10 16:52:37.725 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-10 16:52:37.725 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 36(Long)
2021-04-10 16:52:37.743 DEBUG 20788 --- [http-nio-8080-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 12
2021-04-10 16:52:37.743  INFO 20788 --- [http-nio-8080-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-10 16:52:56.981  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:52:57.007 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:52:57.008 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:52:57.034 DEBUG 20788 --- [http-nio-8080-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:52:57.060 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:52:57.061 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:52:57.091 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:52:57.093 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:52:57.093 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:52:57.114 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:52:57.116 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:52:57.118 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 43(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:52:57.169 DEBUG 20788 --- [http-nio-8080-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:52:57.234  INFO 20788 --- [http-nio-8080-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-10 16:55:15.614  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://localhost:8080/blog/36', ip='0:0:0:0:0:0:0:1', classMethod='com.yi.blog.web.IndexController.blog', args=[36, {}]}
2021-04-10 16:55:15.693 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-10 16:55:15.693 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-10 16:55:15.715 DEBUG 20788 --- [http-nio-8080-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-10 16:55:15.743 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-10 16:55:15.743 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 36(Long)
2021-04-10 16:55:15.774 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-10 16:55:15.775 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-10 16:55:15.775 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-10 16:55:15.803 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-10 16:55:15.804 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-10 16:55:15.805 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: 业务场景-流水号(String), # 单体应用-流水号
## 业务场景：
- 1、单体应用
- 2、流水号生成规则：年月(6位)+流水号(6位),流水号根据当前事件当月的数量生成。每月的一号重置。
例如:绩优一,在2020-11-26日生成绩优一,11月已经有了5件绩优一,则流水号为:202011000006。
绩优一,在2020-2-3日生成绩优一,2月已经有了1件绩优一,则流水号为:202002000002。
## Spring特点：
- 利用Spring的@Service注解天然单例的特性.
- Spring框架中使用@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
## 利用以上两个特性：
- 在Spring bean初始化的时候，得到一个时间，这个时间方便和下一个月的月初作对比进行重置的工作。
- 从数据库查出当前流水号的最大数值。
以上两个工作都是在服务初始就完成的，实际业务执行时，要保证流水号在增加的时候，保证线程安全。(JUC：AtomicInteger+双重检验锁)
```java
@Service
public class SerialNumberGenerator {

    @Autowired
    private IEventGoodOneService eventGoodOneService;
    @Autowired
    private IEventGoodTwoService eventGoodTwoService;
    @Autowired
    private IEventBadOneService eventBadOneService;
    @Autowired
    private IEventBadTwoService eventBadTwoService;
    @Autowired
    private IEventAwardService eventAwardService;

    private static final AtomicInteger eventBadOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventBadTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodOneSn = new AtomicInteger(1);
    private static final AtomicInteger eventGoodTwoSn = new AtomicInteger(1);
    private static final AtomicInteger eventAwardSn = new AtomicInteger(1);
    private static final int ruleCapacity = 6;
    private Date current = new Date();

    @PostConstruct
    public void init() {
        initSn(eventGoodOneService.getMaxEventCode(), eventGoodOneSn);
        initSn(eventGoodTwoService.getMaxEventCode(), eventGoodTwoSn);
        initSn(eventBadOneService.getMaxEventCode(), eventBadOneSn);
        initSn(eventBadTwoService.getMaxEventCode(), eventBadTwoSn);
        initSn(eventAwardService.getMaxEventCode(), eventAwardSn);
    }

    public void initSn(MaxEventCode maxObj, AtomicInteger sn) {
        if (maxObj == null) {
            sn.set(1);
        } else if (maxObj.getMaxEventCode().length() != 12 || maxObj.getCreateTime() == null) {
            throw new BizException(Constant.Info.PARAM_ERR);
        } else {
            Calendar tempCalendar = Calendar.getInstance();
            tempCalendar.setTime(new Date());
            int month = tempCalendar.get(Calendar.MONTH)+1;
            int dbTime = DateUtil.getMonth(maxObj.getCreateTime());
            if (dbTime != month) {
                sn.set(1);
            } else {
                sn.set(1+Integer.parseInt(maxObj.getMaxEventCode().substring(6)));
            }
        }
    }

    private String getFinalSerialNumber(String timeStr, int num, int counts) {
        int len = Integer.toString(counts).length();
        StringBuilder finalSerialNumber = new StringBuilder(timeStr);
        for (int i = 0; i < num - len; i++) {
            finalSerialNumber.append("0");
        }
        finalSerialNumber.append(counts);
        return finalSerialNumber.toString();
    }

    public String getSerialNumber(int eventType) {
        Calendar tempCalendar = Calendar.getInstance();
        tempCalendar.setTime(new Date());
        int month = tempCalendar.get(Calendar.MONTH)+1;
        int currentMonth = DateUtil.getMonth(current);
        if (currentMonth != month) {
            synchronized (this){
                if (DateUtil.getMonth(current) != month) {
                    eventBadOneSn.set(1);
                    eventBadTwoSn.set(1);
                    eventGoodOneSn.set(1);
                    eventGoodTwoSn.set(1);
                    eventAwardSn.set(1);
                    current = new Date();
                }
            }
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");
        //将日期时间格式化
        String timeStr = formatter.format(current);
        String finalSerialNumber = "";
        switch (eventType) {
            case Constant.EventType.GOOD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.GOOD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventGoodTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_ONE: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadOneSn.getAndIncrement());
                break;
            }
            case Constant.EventType.BAD_TWO: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventBadTwoSn.getAndIncrement());
                break;
            }
            case Constant.EventType.AWARD: {
                finalSerialNumber = this.getFinalSerialNumber(timeStr, ruleCapacity, eventAwardSn.getAndIncrement());
                break;
            }
            default: {
                throw new BizException(Constant.Info.PARAM_ERR);
            }
        }
        return finalSerialNumber;
    }
}
```(String), 原创(String), 44(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-06 10:37:51.519(Timestamp), 2021-04-06 12:12:57.115(Timestamp), 14(Long), 1(Long), 36(Long)
2021-04-10 16:55:15.873 DEBUG 20788 --- [http-nio-8080-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-10 16:55:15.946  INFO 20788 --- [http-nio-8080-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
