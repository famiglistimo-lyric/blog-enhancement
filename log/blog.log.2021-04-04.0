2021-04-04 21:36:11.051  INFO 18948 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 18948 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-04 21:36:11.053 DEBUG 18948 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-04 21:36:11.054  INFO 18948 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-04 21:36:11.096  INFO 18948 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-04 21:36:11.096  INFO 18948 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-04 21:36:12.410  INFO 18948 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8083 (http)
2021-04-04 21:36:12.428  INFO 18948 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-04 21:36:12.428  INFO 18948 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-04 21:36:12.539  INFO 18948 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-04 21:36:12.540  INFO 18948 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1443 ms
2021-04-04 21:36:12.922  WARN 18948 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-04 21:36:13.836  INFO 18948 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-04 21:36:13.928  INFO 18948 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-04 21:36:14.215  INFO 18948 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-04 21:36:14.283  INFO 18948 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8083 (http) with context path ''
2021-04-04 21:36:14.287  INFO 18948 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 3.795 seconds (JVM running for 4.729)
2021-04-04 21:41:28.000  INFO 18948 --- [http-nio-8083-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-04 21:41:28.001  INFO 18948 --- [http-nio-8083-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-04 21:41:28.010  INFO 18948 --- [http-nio-8083-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2021-04-04 21:41:28.047  INFO 18948 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 21:41:28.110  INFO 18948 --- [http-nio-8083-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-04 21:41:29.329  INFO 18948 --- [http-nio-8083-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-04 21:41:29.336 DEBUG 18948 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 21:41:29.353 DEBUG 18948 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 21:41:29.618 DEBUG 18948 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 21:41:29.687 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 21:41:29.688 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 21:41:30.345 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 21:41:30.348 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 21:41:30.348 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 21:41:30.532 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 21:41:30.538 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 21:41:30.543 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。

OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 35(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 20:06:31.653(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 21:41:30.757 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 21:41:31.090  INFO 18948 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 21:41:32.022  INFO 18948 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 21:41:32.111 DEBUG 18948 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 21:41:32.112 DEBUG 18948 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 21:41:32.192 DEBUG 18948 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 21:41:32.194  INFO 18948 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 21:42:21.573  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 21:42:22.735 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 21:42:22.735 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 21:42:23.546 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 21:42:24.619 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 21:42:24.620 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 21:42:25.580 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 21:42:25.582 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 21:42:25.582 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 21:42:26.149 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 21:42:26.151 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 21:42:26.153 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。

OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 36(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 20:06:31.653(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 21:42:30.879 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 21:42:33.116  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 21:52:27.283  INFO 18948 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@6d0a3da1]}
2021-04-04 21:52:27.402 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-04 21:52:27.403 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-04 21:52:27.494 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-04 21:52:27.494 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-04 21:52:27.669 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-04 21:52:27.670 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-04 21:52:27.730 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-04 21:52:27.731 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 1
2021-04-04 21:52:27.738 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 21:52:27.738 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 21:52:27.810 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 1
2021-04-04 21:52:27.815 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 21:52:27.816 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 21:52:27.879 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 1
2021-04-04 21:52:27.962 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 21:52:27.963 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 21:52:28.022 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 21:52:28.029 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-04 21:52:28.031 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 44799(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-04 21:52:28.167 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-04 21:52:28.396  INFO 18948 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-04 21:52:28.835  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/footer/newblog', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-04 21:52:28.835  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
2021-04-04 21:52:30.009  INFO 18948 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 21:52:30.438 DEBUG 18948 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 21:52:30.440 DEBUG 18948 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 21:52:32.095 DEBUG 18948 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 21:52:32.147 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 21:52:32.148 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 21:52:32.474 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 21:52:32.475 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 21:52:32.475 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 21:52:32.577 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 21:52:32.579 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 21:52:32.582 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 40(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 21:52:33.349 DEBUG 18948 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 21:52:33.641  INFO 18948 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 21:52:34.238  INFO 18948 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 21:52:34.329 DEBUG 18948 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 21:52:34.330 DEBUG 18948 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 21:52:34.390 DEBUG 18948 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 21:52:34.391  INFO 18948 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 21:56:21.299  INFO 18948 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@256efa9b]}
2021-04-04 21:56:21.338 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-04 21:56:21.338 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-04 21:56:21.373 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-04 21:56:21.374 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-04 21:56:21.452 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-04 21:56:21.452 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-04 21:56:21.486 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-04 21:56:21.487 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 1
2021-04-04 21:56:21.488 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 21:56:21.488 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 21:56:21.519 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 1
2021-04-04 21:56:21.520 DEBUG 18948 --- [http-nio-8083-exec-10] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 21:56:21.520 DEBUG 18948 --- [http-nio-8083-exec-10] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 21:56:21.549 DEBUG 18948 --- [http-nio-8083-exec-10] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 1
2021-04-04 21:56:21.577 DEBUG 18948 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 21:56:21.578 DEBUG 18948 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 21:56:21.599 DEBUG 18948 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 21:56:21.602 DEBUG 18948 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-04 21:56:21.603 DEBUG 18948 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 44800(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-04 21:56:21.649 DEBUG 18948 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-04 21:56:21.739  INFO 18948 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-04 21:56:21.993  INFO 18948 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/footer/newblog', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-04 21:56:21.993  INFO 18948 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
2021-04-04 21:56:29.011  INFO 18948 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/archives', ip='127.0.0.1', classMethod='com.yi.blog.web.ArchiveShowController.archives', args=[{}]}
2021-04-04 21:56:29.076 DEBUG 18948 --- [http-nio-8083-exec-5] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 21:56:29.077 DEBUG 18948 --- [http-nio-8083-exec-5] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 21:56:29.104 DEBUG 18948 --- [http-nio-8083-exec-5] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 1
2021-04-04 21:56:29.105 DEBUG 18948 --- [http-nio-8083-exec-5] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 21:56:29.106 DEBUG 18948 --- [http-nio-8083-exec-5] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 21:56:29.134 DEBUG 18948 --- [http-nio-8083-exec-5] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 1
2021-04-04 21:56:29.135 DEBUG 18948 --- [http-nio-8083-exec-5] c.y.b.mapper.BlogMapper.findGroupYear    : ==>  Preparing: SELECT DATE_FORMAT( b.update_time, '%Y' ) year FROM blog b GROUP BY DATE_FORMAT( b.update_time, '%Y' ) ORDER BY year DESC 
2021-04-04 21:56:29.135 DEBUG 18948 --- [http-nio-8083-exec-5] c.y.b.mapper.BlogMapper.findGroupYear    : ==> Parameters: 
2021-04-04 21:56:29.165 DEBUG 18948 --- [http-nio-8083-exec-5] c.y.b.mapper.BlogMapper.findGroupYear    : <==      Total: 1
2021-04-04 21:56:29.167 DEBUG 18948 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.findByYear   : ==>  Preparing: SELECT b.* FROM blog b WHERE DATE_FORMAT( b.update_time, '%Y' ) = ? 
2021-04-04 21:56:29.167 DEBUG 18948 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-04-04 21:56:29.257 DEBUG 18948 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.findByYear   : <==      Total: 1
2021-04-04 21:56:29.258  INFO 18948 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archives
2021-04-04 21:56:32.661  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 21:56:32.729 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 21:56:32.729 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 21:56:32.757 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 21:56:32.785 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 21:56:32.786 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 21:56:32.860 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 21:56:32.861 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 21:56:32.861 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 21:56:32.902 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 21:56:32.904 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 21:56:32.906 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 41(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 21:56:33.094 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 21:56:33.183  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 21:56:33.753  INFO 18948 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 21:56:33.780 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 21:56:33.781 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 21:56:33.808 DEBUG 18948 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 21:56:33.809  INFO 18948 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 21:56:45.153  INFO 18948 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@4f0bb1f9]}
2021-04-04 21:56:45.235 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-04 21:56:45.235 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-04 21:56:45.264 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-04 21:56:45.265 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-04 21:56:45.366 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-04 21:56:45.367 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-04 21:56:45.394 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-04 21:56:45.394 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 1
2021-04-04 21:56:45.395 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 21:56:45.395 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 21:56:45.418 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 1
2021-04-04 21:56:45.424 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 21:56:45.424 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 21:56:45.460 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 1
2021-04-04 21:56:45.495 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 21:56:45.495 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 21:56:45.521 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 21:56:45.522 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-04 21:56:45.523 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 44801(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-04 21:56:45.580 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-04 21:56:45.669  INFO 18948 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-04 21:56:45.929  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/footer/newblog', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-04 21:56:45.929  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
2021-04-04 21:59:30.641  INFO 18948 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 21:59:30.667 DEBUG 18948 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 21:59:30.667 DEBUG 18948 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 21:59:30.697 DEBUG 18948 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 21:59:30.726 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 21:59:30.726 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 21:59:30.789 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 21:59:30.790 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 21:59:30.790 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 21:59:30.813 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 21:59:30.815 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 21:59:30.816 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 42(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 21:59:30.947 DEBUG 18948 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 21:59:31.054  INFO 18948 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 21:59:31.617  INFO 18948 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 21:59:31.642 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 21:59:31.642 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 21:59:31.670 DEBUG 18948 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 21:59:31.671  INFO 18948 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:03:17.086  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:03:17.140 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:03:17.140 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:03:17.168 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:03:17.212 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:03:17.212 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:03:17.272 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:03:17.272 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:03:17.273 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:03:17.304 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:03:17.306 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:03:17.306 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 43(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:03:17.434 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:03:17.511  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:03:18.060  INFO 18948 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:03:18.099 DEBUG 18948 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:03:18.100 DEBUG 18948 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:03:18.119 DEBUG 18948 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:03:18.120  INFO 18948 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:13:41.269  INFO 18948 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:13:41.361 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:13:41.366 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:13:41.400 DEBUG 18948 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:13:41.423 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:13:41.424 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:13:41.472 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:13:41.473 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:13:41.473 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:13:41.498 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:13:41.499 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:13:41.500 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 44(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:13:41.601 DEBUG 18948 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:13:41.668  INFO 18948 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:14:31.084  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:14:31.131 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:14:31.132 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:14:31.173 DEBUG 18948 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:14:31.198 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:14:31.198 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:14:31.270 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:14:31.271 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:14:31.271 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:14:31.297 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:14:31.299 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:14:31.301 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 45(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:14:31.370 DEBUG 18948 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:14:31.448  INFO 18948 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:15:21.992  INFO 18948 --- [Thread-16] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-04 22:15:21.993  INFO 18948 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-04 22:15:21.996  INFO 18948 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-04 22:15:24.157  INFO 17240 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 17240 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-04 22:15:24.160 DEBUG 17240 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-04 22:15:24.160  INFO 17240 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-04 22:15:24.226  INFO 17240 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-04 22:15:24.227  INFO 17240 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-04 22:15:25.431  INFO 17240 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8083 (http)
2021-04-04 22:15:25.449  INFO 17240 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-04 22:15:25.449  INFO 17240 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-04 22:15:25.536  INFO 17240 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-04 22:15:25.536  INFO 17240 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1309 ms
2021-04-04 22:15:25.875  WARN 17240 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-04 22:15:26.696  INFO 17240 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-04 22:15:26.775  INFO 17240 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-04 22:15:27.042  INFO 17240 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-04 22:15:27.086  INFO 17240 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8083 (http) with context path ''
2021-04-04 22:15:27.089  INFO 17240 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 3.399 seconds (JVM running for 4.163)
2021-04-04 22:15:34.055  INFO 17240 --- [http-nio-8083-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-04 22:15:34.055  INFO 17240 --- [http-nio-8083-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-04 22:15:34.064  INFO 17240 --- [http-nio-8083-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2021-04-04 22:15:34.097  INFO 17240 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:15:34.152  INFO 17240 --- [http-nio-8083-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-04 22:15:34.502  INFO 17240 --- [http-nio-8083-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-04 22:15:34.509 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:15:34.525 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:15:34.565 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:15:34.606 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:15:34.606 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:15:34.692 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:15:34.695 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:15:34.695 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:15:34.727 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:15:34.734 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:15:34.738 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 46(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:15:34.899 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:15:35.017  INFO 17240 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:15:54.128  INFO 17240 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:15:54.190 DEBUG 17240 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:15:54.190 DEBUG 17240 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:15:54.215 DEBUG 17240 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:15:54.236 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:15:54.237 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:15:54.284 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:15:54.286 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:15:54.286 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:15:54.310 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:15:54.314 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:15:54.317 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 47(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:15:54.381 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:15:54.452  INFO 17240 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:17:22.330  INFO 17240 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:17:22.386 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:17:22.387 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:17:22.420 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:17:22.453 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:17:22.453 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:17:22.517 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:17:22.518 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:17:22.518 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:17:22.539 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:17:22.541 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:17:22.543 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 48(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:17:22.630 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:17:22.694  INFO 17240 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:19:26.494  INFO 17240 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:19:26.558 DEBUG 17240 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:19:26.558 DEBUG 17240 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:19:26.590 DEBUG 17240 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:19:26.616 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:19:26.617 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:19:26.677 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:19:26.679 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:19:26.679 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:19:26.705 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:19:26.707 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:19:26.709 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 49(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:19:26.790 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:19:26.853  INFO 17240 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:20:24.686  INFO 17240 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:20:24.728 DEBUG 17240 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:20:24.728 DEBUG 17240 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:20:24.753 DEBUG 17240 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:20:24.792 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:20:24.792 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:20:24.842 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:20:24.843 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:20:24.843 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:20:24.872 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:20:24.873 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:20:24.874 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 50(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:20:24.953 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:20:25.016  INFO 17240 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:21:39.368  INFO 17240 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:21:39.403 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:21:39.403 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:21:39.437 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:21:39.464 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:21:39.465 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:21:39.522 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:21:39.523 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:21:39.523 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:21:39.554 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:21:39.556 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:21:39.557 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 51(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:21:39.651 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:21:39.720  INFO 17240 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:21:53.030  INFO 17240 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:21:53.071 DEBUG 17240 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:21:53.071 DEBUG 17240 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:21:53.091 DEBUG 17240 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:21:53.092  INFO 17240 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:22:33.325  INFO 17240 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:22:33.372 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:22:33.378 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:22:33.407 DEBUG 17240 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:22:33.429 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:22:33.429 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:22:33.496 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:22:33.497 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:22:33.497 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:22:33.537 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:22:33.538 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:22:33.539 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 52(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:22:33.631 DEBUG 17240 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:22:33.706  INFO 17240 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:22:34.145  INFO 17240 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:22:34.148 DEBUG 17240 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:22:34.148 DEBUG 17240 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:22:34.206 DEBUG 17240 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:22:34.206  INFO 17240 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:24:24.071  INFO 17240 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:24:24.160 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:24:24.160 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:24:24.209 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:24:24.235 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:24:24.236 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:24:24.293 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:24:24.294 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:24:24.294 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:24:24.351 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:24:24.354 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:24:24.357 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 53(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:24:24.447 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:24:24.541  INFO 17240 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:24:24.997  INFO 17240 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:24:25.000 DEBUG 17240 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:24:25.000 DEBUG 17240 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:24:25.043 DEBUG 17240 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:24:25.044  INFO 17240 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:25:59.564  INFO 17240 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:25:59.633 DEBUG 17240 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:25:59.634 DEBUG 17240 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:25:59.657 DEBUG 17240 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:25:59.687 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:25:59.688 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:25:59.736 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:25:59.738 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:25:59.738 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:25:59.766 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:25:59.768 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:25:59.769 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 54(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:25:59.843 DEBUG 17240 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:25:59.917  INFO 17240 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:26:41.101  INFO 17240 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:26:41.130 DEBUG 17240 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:26:41.131 DEBUG 17240 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:26:41.168 DEBUG 17240 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:26:41.189 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:26:41.190 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:26:41.250 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:26:41.251 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:26:41.252 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:26:41.290 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:26:41.292 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:26:41.293 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 55(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:26:41.384 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:26:41.457  INFO 17240 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:26:42.217  INFO 17240 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:26:42.254 DEBUG 17240 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:26:42.255 DEBUG 17240 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:26:42.273 DEBUG 17240 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:26:42.273  INFO 17240 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:27:30.358  INFO 17240 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:27:30.423 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:27:30.423 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:27:30.459 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:27:30.482 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:27:30.482 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:27:30.548 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:27:30.548 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:27:30.549 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:27:30.572 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:27:30.573 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:27:30.574 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 56(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:27:30.635 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:27:30.703  INFO 17240 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:27:31.143  INFO 17240 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:27:31.146 DEBUG 17240 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:27:31.146 DEBUG 17240 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:27:31.167 DEBUG 17240 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:27:31.167  INFO 17240 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:28:27.349  INFO 17240 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:28:27.376 DEBUG 17240 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:28:27.377 DEBUG 17240 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:28:27.396 DEBUG 17240 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:28:27.422 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:28:27.422 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:28:27.482 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:28:27.483 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:28:27.483 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:28:27.501 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:28:27.502 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:28:27.503 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 57(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:28:27.574 DEBUG 17240 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:28:27.645  INFO 17240 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:28:28.100  INFO 17240 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:28:28.102 DEBUG 17240 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:28:28.102 DEBUG 17240 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:28:28.134 DEBUG 17240 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:28:28.135  INFO 17240 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:30:00.726  INFO 17240 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:30:00.765 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:30:00.765 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:30:00.796 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:30:00.838 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:30:00.838 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:30:00.919 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:30:00.920 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:30:00.920 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:30:00.941 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:30:00.942 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:30:00.943 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 58(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:30:01.015 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:30:01.075  INFO 17240 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:30:39.500  INFO 17240 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:30:39.531 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:30:39.531 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:30:39.550 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:30:39.570 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:30:39.570 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:30:39.619 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:30:39.620 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:30:39.620 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:30:39.647 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:30:39.649 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:30:39.650 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 59(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:30:39.716 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:30:39.795  INFO 17240 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:31:46.847  INFO 17240 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:31:46.894 DEBUG 17240 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:31:46.895 DEBUG 17240 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:31:46.919 DEBUG 17240 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:31:46.940 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:31:46.940 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:31:46.983 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:31:46.984 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:31:46.985 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:31:47.009 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:31:47.010 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:31:47.010 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 60(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:31:47.074 DEBUG 17240 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:31:47.134  INFO 17240 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:32:33.552  INFO 17240 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:32:33.597 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:32:33.597 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:32:33.634 DEBUG 17240 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:32:33.653 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:32:33.653 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:32:33.726 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:32:33.727 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:32:33.727 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:32:33.764 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:32:33.766 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:32:33.768 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 61(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:32:33.834 DEBUG 17240 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:32:33.918  INFO 17240 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:33:24.830  INFO 17240 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:33:24.868 DEBUG 17240 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:33:24.868 DEBUG 17240 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:33:24.899 DEBUG 17240 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:33:24.932 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:33:24.933 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:33:24.991 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:33:24.993 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:33:24.993 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:33:25.013 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:33:25.014 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:33:25.014 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 62(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:33:25.077 DEBUG 17240 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:33:25.153  INFO 17240 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:35:31.838  INFO 17240 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:35:31.888 DEBUG 17240 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:35:31.888 DEBUG 17240 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:35:31.912 DEBUG 17240 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:35:31.939 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:35:31.939 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:35:31.993 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:35:31.994 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:35:31.994 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:35:32.018 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:35:32.020 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:35:32.021 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 63(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:35:32.089 DEBUG 17240 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:35:32.168  INFO 17240 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:36:46.023  INFO 17240 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:36:46.061 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:36:46.061 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:36:46.091 DEBUG 17240 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:36:46.142 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:36:46.143 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:36:46.188 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:36:46.190 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:36:46.190 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:36:46.216 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:36:46.218 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:36:46.219 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 64(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:36:46.286 DEBUG 17240 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:36:46.351  INFO 17240 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:38:15.651  INFO 17240 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:38:15.679 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:38:15.680 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:38:15.714 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:38:15.744 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:38:15.744 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:38:15.812 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:38:15.813 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:38:15.813 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:38:15.843 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:38:15.844 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:38:15.845 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 65(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:38:15.910 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:38:15.999  INFO 17240 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:38:20.497  INFO 17240 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:38:20.557 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:38:20.557 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:38:20.579 DEBUG 17240 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:38:20.602 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:38:20.602 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:38:20.660 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:38:20.660 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:38:20.660 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:38:20.685 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:38:20.686 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:38:20.687 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 66(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:38:20.750 DEBUG 17240 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:38:20.814  INFO 17240 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:38:39.303  INFO 17240 --- [Thread-15] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-04 22:38:39.303  INFO 17240 --- [Thread-15] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-04 22:38:39.307  INFO 17240 --- [Thread-15] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-04 22:39:00.313  INFO 19588 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 19588 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-04 22:39:00.316 DEBUG 19588 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-04 22:39:00.316  INFO 19588 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-04 22:39:00.355  INFO 19588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-04 22:39:00.355  INFO 19588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-04 22:39:01.629  INFO 19588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8083 (http)
2021-04-04 22:39:01.647  INFO 19588 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-04 22:39:01.647  INFO 19588 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-04 22:39:01.735  INFO 19588 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-04 22:39:01.736  INFO 19588 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1381 ms
2021-04-04 22:39:02.096  WARN 19588 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-04 22:39:02.992  INFO 19588 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-04 22:39:03.175  INFO 19588 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-04 22:39:03.503  INFO 19588 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-04 22:39:03.555  INFO 19588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8083 (http) with context path ''
2021-04-04 22:39:03.558  INFO 19588 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 4.077 seconds (JVM running for 5.114)
2021-04-04 22:39:04.959  INFO 19588 --- [http-nio-8083-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-04 22:39:04.960  INFO 19588 --- [http-nio-8083-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-04 22:39:04.972  INFO 19588 --- [http-nio-8083-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2021-04-04 22:39:05.013  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:39:05.080  INFO 19588 --- [http-nio-8083-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-04 22:39:05.433  INFO 19588 --- [http-nio-8083-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-04 22:39:05.441 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:39:05.459 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:39:05.501 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:39:05.531 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:39:05.532 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:39:05.585 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:39:05.600 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:39:05.601 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:39:05.628 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:39:05.636 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:39:05.640 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 67(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:39:05.760 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:39:05.878  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:40:56.697  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:40:56.769 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:40:56.770 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:40:56.800 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:40:56.826 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:40:56.826 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:40:56.906 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:40:56.907 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:40:56.907 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:40:56.935 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:40:56.938 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:40:56.940 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 68(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:40:57.008 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:40:57.079  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:41:22.033  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:41:22.079 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:41:22.080 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:41:22.100 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:41:22.122 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:41:22.123 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:41:22.186 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:41:22.187 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:41:22.187 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:41:22.210 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:41:22.211 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:41:22.213 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 69(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:41:22.275 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:41:22.346  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:41:46.922  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:41:46.951 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:41:46.952 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:41:46.976 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:41:47.003 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:41:47.003 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:41:47.078 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:41:47.080 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:41:47.080 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:41:47.105 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:41:47.106 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:41:47.108 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 70(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:41:47.175 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:41:47.253  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:42:34.887  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:42:34.917 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:42:34.917 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:42:34.942 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:42:34.981 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:42:34.982 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:42:35.058 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:42:35.059 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:42:35.060 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:42:35.092 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:42:35.093 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:42:35.094 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 71(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:42:35.159 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:42:35.227  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:42:41.671  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:42:41.701 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:42:41.701 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:42:41.723 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:42:41.753 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:42:41.754 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:42:41.840 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:42:41.841 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:42:41.841 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:42:41.868 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:42:41.869 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:42:41.870 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 72(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:42:41.947 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:42:42.012  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:42:59.859  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:42:59.923 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:42:59.923 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:42:59.945 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:42:59.965 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:42:59.965 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:43:00.025 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:43:00.027 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:43:00.027 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:43:00.050 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:43:00.051 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:43:00.052 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 73(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:43:00.124 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:43:00.187  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:43:19.023  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:43:19.082 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:43:19.082 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:43:19.117 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:43:19.141 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:43:19.142 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:43:19.220 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:43:19.221 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:43:19.222 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:43:19.246 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:43:19.248 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:43:19.250 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 74(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:43:19.316 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:43:19.397  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:44:06.560  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:44:06.654 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:44:06.655 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:44:06.691 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:44:06.715 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:44:06.715 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:44:06.783 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:44:06.784 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:44:06.784 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:44:06.808 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:44:06.810 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:44:06.811 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 75(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:44:06.909 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:44:06.983  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:44:23.493  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:44:23.523 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:44:23.524 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:44:23.548 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:44:23.566 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:44:23.567 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:44:23.618 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:44:23.619 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:44:23.619 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:44:23.646 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:44:23.647 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:44:23.648 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 76(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:44:23.714 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:44:23.796  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:55:03.885  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:55:04.087 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:55:04.087 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:55:04.229 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:55:04.410 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:55:04.411 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:55:04.661 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:55:04.662 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:55:04.662 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:55:04.774 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:55:04.775 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:55:04.776 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 77(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:55:05.037 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:55:05.250  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:55:33.897  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:55:33.983 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:55:33.984 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:55:34.052 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:55:34.126 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:55:34.126 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:55:34.258 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:55:34.259 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:55:34.259 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:55:34.339 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:55:34.340 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:55:34.341 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 78(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:55:34.471 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:55:34.682  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:55:43.900  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:55:43.960 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:55:43.961 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:55:44.008 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:55:44.078 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:55:44.078 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:55:44.169 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:55:44.170 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:55:44.170 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:55:44.252 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:55:44.253 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:55:44.254 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 79(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:55:44.429 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:55:44.608  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:55:54.877  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:55:54.971 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:55:54.971 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:55:55.040 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:55:55.076 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:55:55.077 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:55:55.167 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:55:55.168 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:55:55.168 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:55:55.243 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:55:55.244 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:55:55.245 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 80(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:55:55.385 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:55:55.572  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:56:46.547  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:56:46.657 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:56:46.658 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:56:46.791 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:56:46.845 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:56:46.845 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:56:46.970 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:56:46.971 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:56:46.972 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:56:47.014 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:56:47.015 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:56:47.016 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 81(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:56:47.151 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:56:47.334  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:58:11.415  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:58:11.468 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:58:11.469 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:58:11.542 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:58:11.634 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:58:11.635 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:58:11.810 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:58:11.811 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:58:11.812 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:58:11.899 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:58:11.901 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:58:11.904 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 82(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:58:12.022 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:58:12.206  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:58:12.940  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:58:13.048 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:58:13.048 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:58:13.164 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:58:13.167  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:58:49.856  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:58:49.932 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:58:49.933 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:58:50.005 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:58:50.049 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:58:50.049 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:58:50.141 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:58:50.143 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:58:50.143 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:58:50.219 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:58:50.221 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:58:50.223 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 83(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:58:50.392 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:58:50.607  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:58:51.059  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:58:51.061 DEBUG 19588 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:58:51.062 DEBUG 19588 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:58:51.120 DEBUG 19588 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:58:51.121  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 22:59:06.080  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 22:59:06.116 DEBUG 19588 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 22:59:06.117 DEBUG 19588 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 22:59:06.169 DEBUG 19588 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 22:59:06.242 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 22:59:06.242 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 22:59:06.329 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 22:59:06.331 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 22:59:06.331 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 22:59:06.372 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 22:59:06.374 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 22:59:06.375 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 84(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 22:59:06.511 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 22:59:06.650  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 22:59:07.145  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 22:59:07.147 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 22:59:07.147 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 22:59:07.194 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 22:59:07.194  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:00:27.034  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:00:27.095 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:00:27.096 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:00:27.145 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:00:27.202 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:00:27.202 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:00:27.349 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:00:27.350 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:00:27.350 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:00:27.404 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:00:27.405 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:00:27.406 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 85(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:00:27.607 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:00:27.762  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:00:28.625  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:00:28.716 DEBUG 19588 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:00:28.717 DEBUG 19588 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:00:28.781 DEBUG 19588 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:00:28.782  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:01:17.486  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:01:17.564 DEBUG 19588 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:01:17.564 DEBUG 19588 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:01:17.593 DEBUG 19588 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:01:17.651 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:01:17.651 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:01:18.295 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:01:18.296 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:01:18.296 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:01:18.363 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:01:18.365 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:01:18.366 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 86(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:01:18.567 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:01:18.778  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:01:19.364  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:01:19.435 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:01:19.435 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:01:19.486 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:01:19.487  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:03:04.308  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:03:04.368 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:03:04.368 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:03:04.422 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:03:04.470 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:03:04.471 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:03:04.601 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:03:04.602 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:03:04.603 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:03:04.659 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:03:04.660 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:03:04.661 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 87(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:03:04.780 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:03:05.048  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:03:05.468  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:03:05.469 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:03:05.469 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:03:05.551 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:03:05.552  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:03:41.046  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:03:41.127 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:03:41.127 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:03:41.190 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:03:41.249 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:03:41.249 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:03:41.415 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:03:41.416 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:03:41.416 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:03:41.490 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:03:41.491 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:03:41.492 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 88(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:03:41.664 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:03:41.798  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:03:42.205  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:03:42.209 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:03:42.209 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:03:42.280 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:03:42.280  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:04:13.437  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:04:13.481 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:04:13.481 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:04:13.525 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:04:13.572 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:04:13.573 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:04:13.730 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:04:13.731 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:04:13.731 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:04:13.801 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:04:13.802 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:04:13.803 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 89(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:04:13.925 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:04:14.092  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:04:14.553  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:04:14.555 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:04:14.555 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:04:14.640 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:04:14.640  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:05:43.653  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:05:43.724 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:05:43.725 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:05:43.789 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:05:43.832 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:05:43.832 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:05:43.974 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:05:43.975 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:05:43.975 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:05:44.040 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:05:44.041 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:05:44.043 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 90(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:05:44.148 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:05:44.326  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:05:44.814  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:05:44.817 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:05:44.818 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:05:44.885 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:05:44.886  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:06:26.397  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:06:26.500 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:06:26.500 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:06:26.561 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:06:26.620 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:06:26.620 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:06:26.806 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:06:26.807 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:06:26.807 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:06:26.892 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:06:26.894 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:06:26.895 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 91(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:06:27.139 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:06:27.451  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:06:27.956  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:06:28.012 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:06:28.013 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:06:28.060 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:06:28.061  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:07:02.017  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:07:02.086 DEBUG 19588 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:07:02.086 DEBUG 19588 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:07:02.162 DEBUG 19588 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:07:02.231 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:07:02.232 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:07:02.418 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:07:02.419 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:07:02.419 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:07:02.496 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:07:02.497 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:07:02.497 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 92(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:07:02.657 DEBUG 19588 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:07:02.894  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:07:10.962  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:07:11.033 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:07:11.033 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:07:11.095 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:07:11.160 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:07:11.160 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:07:11.347 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:07:11.348 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:07:11.348 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:07:11.419 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:07:11.420 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:07:11.421 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 93(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:07:11.586 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:07:11.711  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:07:39.331  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:07:39.406 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:07:39.407 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:07:39.478 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:07:39.509 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:07:39.509 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:07:39.650 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:07:39.651 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:07:39.651 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:07:39.780 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:07:39.782 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:07:39.783 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 94(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:07:40.184 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:07:40.357  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:07:49.481  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:07:49.558 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:07:49.559 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:07:49.606 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:07:49.674 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:07:49.674 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:07:49.811 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:07:49.812 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:07:49.812 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:07:49.888 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:07:49.889 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:07:49.890 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 95(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:07:50.063 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:07:50.744  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:08:08.050  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:08:08.122 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:08:08.122 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:08:08.180 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:08:08.236 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:08:08.236 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:08:08.611 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:08:08.613 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:08:08.613 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:08:08.694 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:08:08.695 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:08:08.695 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 96(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:08:08.912 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:08:09.078  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:08:09.475  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:08:09.476 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:08:09.476 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:08:09.526 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:08:09.526  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:08:24.836  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:08:24.890 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:08:24.891 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:08:24.954 DEBUG 19588 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:08:25.010 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:08:25.010 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:08:25.562 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:08:25.563 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:08:25.563 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:08:25.647 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:08:25.648 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:08:25.649 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 97(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:08:25.810 DEBUG 19588 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:08:26.070  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:08:26.598  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:08:26.691 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:08:26.692 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:08:26.761 DEBUG 19588 --- [http-nio-8083-exec-10] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:08:26.762  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:08:51.278  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:08:56.297  WARN 19588 --- [http-nio-8083-exec-7] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@224b3126 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-04-04 23:09:01.310  WARN 19588 --- [http-nio-8083-exec-7] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@2de1984d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2021-04-04 23:09:01.405 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:09:01.405 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:09:01.485 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:09:01.549 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:09:01.550 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:09:01.700 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:09:01.702 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:09:01.702 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:09:01.772 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:09:01.773 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:09:01.773 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 98(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:09:02.025 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:09:02.206  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:09:02.600  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:09:02.601 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:09:02.601 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:09:02.678 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:09:02.679  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:09:06.207  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:09:06.293 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:09:06.294 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:09:06.363 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:09:06.406 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:09:06.406 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:09:06.526 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:09:06.527 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:09:06.528 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:09:06.599 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:09:06.599 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:09:06.600 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 99(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:09:06.792 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:09:07.024  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:09:07.744  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:09:07.829 DEBUG 19588 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:09:07.830 DEBUG 19588 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:09:07.916 DEBUG 19588 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:09:07.916  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:10:06.266  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:10:06.326 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:10:06.326 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:10:06.377 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:10:06.429 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:10:06.429 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:10:06.521 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:10:06.522 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:10:06.522 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:10:06.591 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:10:06.592 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:10:06.593 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 100(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:10:06.733 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:10:06.910  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:10:07.495  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:10:07.549 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:10:07.550 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:10:07.597 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:10:07.598  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:11:05.146  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:11:05.245 DEBUG 19588 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:11:05.245 DEBUG 19588 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:11:05.311 DEBUG 19588 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:11:05.384 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:11:05.384 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:11:05.522 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:11:05.523 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:11:05.523 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:11:05.609 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:11:05.610 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:11:05.610 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 101(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:11:05.784 DEBUG 19588 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:11:05.988  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:11:06.415  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:11:06.416 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:11:06.417 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:11:06.517 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:11:06.517  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:12:51.341  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:12:51.430 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:12:51.430 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:12:51.509 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:12:51.578 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:12:51.578 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:12:52.312 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:12:52.313 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:12:52.314 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:12:52.378 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:12:52.379 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:12:52.381 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 102(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:12:52.513 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:12:52.664  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:12:53.138  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:12:53.139 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:12:53.139 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:12:53.312 DEBUG 19588 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:12:53.313  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:13:10.581  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:13:10.637 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:13:10.637 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:13:10.674 DEBUG 19588 --- [http-nio-8083-exec-10] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:13:10.756 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:13:10.757 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:13:10.938 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:13:10.939 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:13:10.939 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:13:11.016 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:13:11.018 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:13:11.019 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 103(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:13:11.189 DEBUG 19588 --- [http-nio-8083-exec-10] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:13:11.343  INFO 19588 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:13:11.847  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:13:11.926 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:13:11.927 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:13:11.990 DEBUG 19588 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:13:11.991  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:13:27.993  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:13:28.084 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:13:28.084 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:13:28.153 DEBUG 19588 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:13:28.203 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:13:28.203 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:13:28.366 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:13:28.367 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:13:28.367 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:13:28.439 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:13:28.440 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:13:28.441 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 104(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:13:28.662 DEBUG 19588 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:13:28.924  INFO 19588 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:13:29.740  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:13:29.827 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:13:29.828 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:13:29.947 DEBUG 19588 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:13:29.948  INFO 19588 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:14:14.371  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:14:14.450 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:14:14.450 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:14:14.526 DEBUG 19588 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:14:14.596 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:14:14.596 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:14:14.764 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:14:14.765 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:14:14.765 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:14:14.831 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:14:14.832 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:14:14.832 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 105(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:14:14.991 DEBUG 19588 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:14:15.215  INFO 19588 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:14:15.645  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:14:15.646 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:14:15.646 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:14:15.717 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:14:15.717  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:16:02.924  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:16:03.011 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:16:03.012 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:16:03.075 DEBUG 19588 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:16:03.169 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:16:03.169 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:16:03.314 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:16:03.315 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:16:03.316 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:16:03.395 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:16:03.396 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:16:03.396 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 106(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:16:03.577 DEBUG 19588 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:16:03.714  INFO 19588 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:16:12.996  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:16:13.079 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:16:13.079 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:16:13.153 DEBUG 19588 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:16:13.193 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:16:13.193 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:16:13.357 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:16:13.358 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:16:13.358 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:16:13.436 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:16:13.436 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:16:13.437 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 107(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:16:13.591 DEBUG 19588 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:16:13.751  INFO 19588 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:16:16.482  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:16:16.545 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:16:16.546 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:16:16.593 DEBUG 19588 --- [http-nio-8083-exec-6] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:16:16.668 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:16:16.668 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:16:16.794 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:16:16.795 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:16:16.795 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:16:16.881 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:16:16.882 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:16:16.883 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 108(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:16:17.101 DEBUG 19588 --- [http-nio-8083-exec-6] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:16:17.344  INFO 19588 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:16:17.730  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:16:17.732 DEBUG 19588 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:16:17.732 DEBUG 19588 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:16:17.801 DEBUG 19588 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:16:17.801  INFO 19588 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:21:00.112  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:21:00.199 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:21:00.199 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:21:00.255 DEBUG 19588 --- [http-nio-8083-exec-3] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:21:00.282 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:21:00.282 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:21:00.336 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:21:00.338 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:21:00.338 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:21:00.361 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:21:00.362 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:21:00.363 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 109(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:21:00.442 DEBUG 19588 --- [http-nio-8083-exec-3] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:21:00.522  INFO 19588 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:21:00.964  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:21:00.965 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:21:00.965 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:21:01.012 DEBUG 19588 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:21:01.012  INFO 19588 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:22:04.878  INFO 19588 --- [Thread-17] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-04 23:22:04.879  INFO 19588 --- [Thread-17] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-04 23:22:04.883  INFO 19588 --- [Thread-17] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-04 23:22:15.522  INFO 752 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 752 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-04 23:22:15.525 DEBUG 752 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-04 23:22:15.525  INFO 752 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-04 23:22:15.584  INFO 752 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-04 23:22:15.584  INFO 752 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-04 23:22:16.883  INFO 752 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8083 (http)
2021-04-04 23:22:16.900  INFO 752 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-04 23:22:16.901  INFO 752 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-04 23:22:17.005  INFO 752 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-04 23:22:17.006  INFO 752 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1421 ms
2021-04-04 23:22:17.351  WARN 752 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-04 23:22:18.192  INFO 752 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-04 23:22:18.272  INFO 752 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-04 23:22:18.565  INFO 752 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-04 23:22:18.610  INFO 752 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8083 (http) with context path ''
2021-04-04 23:22:18.613  INFO 752 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 3.53 seconds (JVM running for 4.374)
2021-04-04 23:22:21.643  INFO 752 --- [http-nio-8083-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-04 23:22:21.643  INFO 752 --- [http-nio-8083-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-04 23:22:21.653  INFO 752 --- [http-nio-8083-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2021-04-04 23:22:21.694  INFO 752 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:22:21.758  INFO 752 --- [http-nio-8083-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-04 23:22:22.110  INFO 752 --- [http-nio-8083-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-04 23:22:22.117 DEBUG 752 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:22:22.134 DEBUG 752 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:22:22.175 DEBUG 752 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:22:22.213 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:22:22.214 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:22:22.265 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:22:22.268 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:22:22.268 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:22:22.303 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:22:22.309 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:22:22.313 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 110(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:22:22.402 DEBUG 752 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:22:22.531  INFO 752 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:22:23.298  INFO 752 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:22:23.332 DEBUG 752 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:22:23.333 DEBUG 752 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:22:23.357 DEBUG 752 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:22:23.359  INFO 752 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:22:38.021  INFO 752 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:22:38.043 DEBUG 752 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:22:38.043 DEBUG 752 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:22:38.065 DEBUG 752 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:22:38.085 DEBUG 752 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:22:38.086 DEBUG 752 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:22:38.136 DEBUG 752 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:22:38.138 DEBUG 752 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:22:38.139 DEBUG 752 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:22:38.164 DEBUG 752 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:22:38.167 DEBUG 752 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:22:38.170 DEBUG 752 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 111(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:22:38.216  INFO 752 --- [Thread-12] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-04 23:22:38.217  INFO 752 --- [Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-04 23:22:38.229  INFO 752 --- [Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-04 23:22:38.236  WARN 752 --- [http-nio-8083-exec-1] com.zaxxer.hikari.pool.ProxyConnection   : HikariPool-1 - Connection com.mysql.cj.jdbc.ConnectionImpl@4ed56cac marked as broken because of SQLSTATE(08S01), ErrorCode(0)

com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure

The last packet successfully received from the server was 28 milliseconds ago.  The last packet sent successfully to the server was 28 milliseconds ago.
	at com.mysql.cj.jdbc.exceptions.SQLError.createCommunicationsException(SQLError.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:64)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy80.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:287)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:65)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy81.updateById(Unknown Source)
	at com.yi.blog.service.impl.BlogServiceImpl.getAndConvert(BlogServiceImpl.java:68)
	at com.yi.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4b012ad9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8e64d280.getAndConvert(<generated>)
	at com.yi.blog.web.IndexController.blog(IndexController.java:74)
	at com.yi.blog.web.IndexController$$FastClassBySpringCGLIB$$7bdf2539.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.IndexController$$EnhancerBySpringCGLIB$$9e3bcb94.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet successfully received from the server was 28 milliseconds ago.  The last packet sent successfully to the server was 28 milliseconds ago.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)
	at com.mysql.cj.protocol.a.NativeProtocol.readMessage(NativeProtocol.java:541)
	at com.mysql.cj.protocol.a.NativeProtocol.checkErrorMessage(NativeProtocol.java:711)
	at com.mysql.cj.protocol.a.NativeProtocol.sendCommand(NativeProtocol.java:650)
	at com.mysql.cj.protocol.a.NativeProtocol.sendQueryPacket(NativeProtocol.java:949)
	at com.mysql.cj.NativeSession.execSQL(NativeSession.java:1113)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:930)
	... 110 common frames omitted
Caused by: java.net.SocketException: Socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at com.mysql.cj.protocol.ReadAheadInputStream.fill(ReadAheadInputStream.java:107)
	at com.mysql.cj.protocol.ReadAheadInputStream.readFromUnderlyingStreamIfNecessary(ReadAheadInputStream.java:150)
	at com.mysql.cj.protocol.ReadAheadInputStream.read(ReadAheadInputStream.java:180)
	at java.io.FilterInputStream.read(FilterInputStream.java:133)
	at com.mysql.cj.protocol.FullReadInputStream.readFully(FullReadInputStream.java:64)
	at com.mysql.cj.protocol.a.SimplePacketReader.readHeader(SimplePacketReader.java:63)
	at com.mysql.cj.protocol.a.SimplePacketReader.readHeader(SimplePacketReader.java:45)
	at com.mysql.cj.protocol.a.TimeTrackingPacketReader.readHeader(TimeTrackingPacketReader.java:52)
	at com.mysql.cj.protocol.a.TimeTrackingPacketReader.readHeader(TimeTrackingPacketReader.java:41)
	at com.mysql.cj.protocol.a.MultiPacketReader.readHeader(MultiPacketReader.java:54)
	at com.mysql.cj.protocol.a.MultiPacketReader.readHeader(MultiPacketReader.java:44)
	at com.mysql.cj.protocol.a.NativeProtocol.readMessage(NativeProtocol.java:535)
	... 115 common frames omitted

2021-04-04 23:22:38.315  WARN 752 --- [http-nio-8083-exec-1] o.s.jdbc.support.SQLErrorCodesFactory    : Error while extracting database name - falling back to empty error codes

org.springframework.jdbc.support.MetaDataAccessException: Error while extracting DatabaseMetaData; nested exception is java.sql.SQLException: Connection is closed
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:331)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.jdbc.support.SQLErrorCodesFactory.getErrorCodes(SQLErrorCodesFactory.java:214)
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.setDataSource(SQLErrorCodeSQLExceptionTranslator.java:136)
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.<init>(SQLErrorCodeSQLExceptionTranslator.java:99)
	at org.mybatis.spring.MyBatisExceptionTranslator.lambda$new$0(MyBatisExceptionTranslator.java:54)
	at org.mybatis.spring.MyBatisExceptionTranslator.initExceptionTranslator(MyBatisExceptionTranslator.java:102)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:87)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy80.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:287)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:65)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy81.updateById(Unknown Source)
	at com.yi.blog.service.impl.BlogServiceImpl.getAndConvert(BlogServiceImpl.java:68)
	at com.yi.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4b012ad9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8e64d280.getAndConvert(<generated>)
	at com.yi.blog.web.IndexController.blog(IndexController.java:74)
	at com.yi.blog.web.IndexController$$FastClassBySpringCGLIB$$7bdf2539.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.IndexController$$EnhancerBySpringCGLIB$$9e3bcb94.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLException: Connection is closed
	at com.zaxxer.hikari.pool.ProxyConnection$ClosedConnection.lambda$getClosedConnection$0(ProxyConnection.java:489)
	at com.sun.proxy.$Proxy113.getMetaData(Unknown Source)
	at com.zaxxer.hikari.pool.ProxyConnection.getMetaData(ProxyConnection.java:354)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getMetaData(HikariProxyConnection.java)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:320)
	... 92 common frames omitted

2021-04-04 23:22:38.320 ERROR 752 --- [http-nio-8083-exec-1] o.s.t.i.TransactionInterceptor           : Application exception overridden by rollback exception

org.springframework.dao.RecoverableDataAccessException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure

The last packet successfully received from the server was 28 milliseconds ago.  The last packet sent successfully to the server was 28 milliseconds ago.
### The error may exist in com/yi/blog/mapper/BlogMapper.java (best guess)
### The error may involve com.yi.blog.mapper.BlogMapper.updateById-Inline
### The error occurred while setting parameters
### SQL: UPDATE blog  SET title=?, content=?,  stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=?  WHERE id=?
### Cause: com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure

The last packet successfully received from the server was 28 milliseconds ago.  The last packet sent successfully to the server was 28 milliseconds ago.
; Communications link failure

The last packet successfully received from the server was 28 milliseconds ago.  The last packet sent successfully to the server was 28 milliseconds ago.; nested exception is com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure

The last packet successfully received from the server was 28 milliseconds ago.  The last packet sent successfully to the server was 28 milliseconds ago.
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:100)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy80.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:287)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:65)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy81.updateById(Unknown Source)
	at com.yi.blog.service.impl.BlogServiceImpl.getAndConvert(BlogServiceImpl.java:68)
	at com.yi.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4b012ad9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8e64d280.getAndConvert(<generated>)
	at com.yi.blog.web.IndexController.blog(IndexController.java:74)
	at com.yi.blog.web.IndexController$$FastClassBySpringCGLIB$$7bdf2539.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.IndexController$$EnhancerBySpringCGLIB$$9e3bcb94.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure

The last packet successfully received from the server was 28 milliseconds ago.  The last packet sent successfully to the server was 28 milliseconds ago.
	at com.mysql.cj.jdbc.exceptions.SQLError.createCommunicationsException(SQLError.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:64)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 84 common frames omitted
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet successfully received from the server was 28 milliseconds ago.  The last packet sent successfully to the server was 28 milliseconds ago.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)
	at com.mysql.cj.protocol.a.NativeProtocol.readMessage(NativeProtocol.java:541)
	at com.mysql.cj.protocol.a.NativeProtocol.checkErrorMessage(NativeProtocol.java:711)
	at com.mysql.cj.protocol.a.NativeProtocol.sendCommand(NativeProtocol.java:650)
	at com.mysql.cj.protocol.a.NativeProtocol.sendQueryPacket(NativeProtocol.java:949)
	at com.mysql.cj.NativeSession.execSQL(NativeSession.java:1113)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:930)
	... 110 common frames omitted
Caused by: java.net.SocketException: Socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at com.mysql.cj.protocol.ReadAheadInputStream.fill(ReadAheadInputStream.java:107)
	at com.mysql.cj.protocol.ReadAheadInputStream.readFromUnderlyingStreamIfNecessary(ReadAheadInputStream.java:150)
	at com.mysql.cj.protocol.ReadAheadInputStream.read(ReadAheadInputStream.java:180)
	at java.io.FilterInputStream.read(FilterInputStream.java:133)
	at com.mysql.cj.protocol.FullReadInputStream.readFully(FullReadInputStream.java:64)
	at com.mysql.cj.protocol.a.SimplePacketReader.readHeader(SimplePacketReader.java:63)
	at com.mysql.cj.protocol.a.SimplePacketReader.readHeader(SimplePacketReader.java:45)
	at com.mysql.cj.protocol.a.TimeTrackingPacketReader.readHeader(TimeTrackingPacketReader.java:52)
	at com.mysql.cj.protocol.a.TimeTrackingPacketReader.readHeader(TimeTrackingPacketReader.java:41)
	at com.mysql.cj.protocol.a.MultiPacketReader.readHeader(MultiPacketReader.java:54)
	at com.mysql.cj.protocol.a.MultiPacketReader.readHeader(MultiPacketReader.java:44)
	at com.mysql.cj.protocol.a.NativeProtocol.readMessage(NativeProtocol.java:535)
	... 115 common frames omitted

2021-04-04 23:22:38.807  INFO 752 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 752 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-04 23:22:38.808 DEBUG 752 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-04 23:22:38.808  INFO 752 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-04 23:22:39.437  INFO 752 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8083 (http)
2021-04-04 23:22:39.438  INFO 752 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-04 23:22:39.438  INFO 752 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-04 23:22:39.454  INFO 752 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-04 23:22:39.454  INFO 752 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 641 ms
2021-04-04 23:22:39.557  WARN 752 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-04 23:22:40.191  INFO 752 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-04 23:22:40.225  INFO 752 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-04 23:22:40.415  INFO 752 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-04 23:22:40.434  INFO 752 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8083 (http) with context path ''
2021-04-04 23:22:40.434  INFO 752 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 1.703 seconds (JVM running for 26.194)
2021-04-04 23:22:40.436  INFO 752 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2021-04-04 23:22:45.191  INFO 752 --- [http-nio-8083-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-04 23:22:45.192  INFO 752 --- [http-nio-8083-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-04 23:22:45.201  INFO 752 --- [http-nio-8083-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2021-04-04 23:22:49.814 ERROR 752 --- [http-nio-8083-exec-2] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8083-exec-2] Exception processing template "index": An error happened during template parsing (template: "class path resource [templates/index.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "user.avatar" (template: "index" - line 50, col 69)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 52 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "user.avatar" (template: "index" - line 50, col 69)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 54 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'avatar' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:90)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:109)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:328)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 73 common frames omitted

2021-04-04 23:22:49.815 ERROR 752 --- [http-nio-8083-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'avatar' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:90)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:109)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:328)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-04 23:23:19.089 ERROR 752 --- [http-nio-8083-exec-5] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8083-exec-5] Exception processing template "index": An error happened during template parsing (template: "class path resource [templates/index.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "user.avatar" (template: "index" - line 50, col 69)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 52 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "user.avatar" (template: "index" - line 50, col 69)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 54 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'avatar' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:90)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:109)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:328)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 73 common frames omitted

2021-04-04 23:23:19.090 ERROR 752 --- [http-nio-8083-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/index.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'avatar' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:90)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:109)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:328)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-04 23:24:24.411  INFO 752 --- [Thread-25] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-04 23:24:27.315  INFO 11904 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 11904 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-04 23:24:27.318 DEBUG 11904 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-04 23:24:27.318  INFO 11904 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-04 23:24:27.383  INFO 11904 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-04 23:24:27.383  INFO 11904 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-04 23:24:28.619  INFO 11904 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8083 (http)
2021-04-04 23:24:28.637  INFO 11904 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-04 23:24:28.637  INFO 11904 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-04 23:24:28.729  INFO 11904 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-04 23:24:28.729  INFO 11904 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1346 ms
2021-04-04 23:24:29.087  WARN 11904 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-04 23:24:29.924  INFO 11904 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-04 23:24:30.015  INFO 11904 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-04 23:24:30.295  INFO 11904 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-04 23:24:30.340  INFO 11904 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8083 (http) with context path ''
2021-04-04 23:24:30.342  INFO 11904 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 3.486 seconds (JVM running for 4.288)
2021-04-04 23:24:33.296  INFO 11904 --- [http-nio-8083-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-04 23:24:33.296  INFO 11904 --- [http-nio-8083-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-04 23:24:33.304  INFO 11904 --- [http-nio-8083-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2021-04-04 23:24:39.722  INFO 11904 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@5d884902]}
2021-04-04 23:24:39.758  INFO 11904 --- [http-nio-8083-exec-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-04 23:24:40.143  INFO 11904 --- [http-nio-8083-exec-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-04 23:24:40.173 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-04 23:24:40.190 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-04 23:24:40.233 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-04 23:24:40.234 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-04 23:24:40.288 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-04 23:24:40.288 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-04 23:24:40.318 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-04 23:24:40.318 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 1
2021-04-04 23:24:40.325 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 23:24:40.326 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 23:24:40.361 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 1
2021-04-04 23:24:40.367 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 23:24:40.367 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 23:24:40.393 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 1
2021-04-04 23:24:40.434 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:24:40.434 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:24:40.455 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:24:40.466 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-04 23:24:40.468 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 44802(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-04 23:24:40.524 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-04 23:24:40.605  INFO 11904 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-04 23:24:40.960  INFO 11904 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/footer/newblog', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-04 23:24:40.961  INFO 11904 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
2021-04-04 23:24:41.801  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:24:41.846 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:24:41.846 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:24:41.873 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:24:41.897 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:24:41.898 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:24:41.958 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:24:41.961 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:24:41.961 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:24:41.989 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:24:41.995 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:24:41.998 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 112(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:24:42.096 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:24:42.214  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:24:42.835  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:24:42.908 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:24:42.908 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:24:42.930 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:24:42.932  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:25:17.721  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:25:17.749 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:25:17.750 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:25:17.779 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:25:17.803 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:25:17.803 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:25:17.857 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:25:17.858 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:25:17.858 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:25:17.890 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:25:17.891 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:25:17.894 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 113(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:25:17.993 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:25:18.075  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:25:18.485  INFO 11904 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:25:18.488 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:25:18.489 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:25:18.513 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:25:18.514  INFO 11904 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:26:17.281  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:26:17.308 DEBUG 11904 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:26:17.308 DEBUG 11904 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:26:17.333 DEBUG 11904 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:26:17.358 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:26:17.359 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:26:17.414 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:26:17.415 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:26:17.416 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:26:17.447 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:26:17.450 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:26:17.452 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 114(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:26:17.541 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:26:17.615  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:26:18.035  INFO 11904 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:26:18.036 DEBUG 11904 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:26:18.036 DEBUG 11904 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:26:18.082 DEBUG 11904 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:26:18.083  INFO 11904 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:26:25.044  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:26:25.084 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:26:25.085 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:26:25.110 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:26:25.137 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:26:25.137 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:26:25.195 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:26:25.196 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:26:25.196 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:26:25.222 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:26:25.226 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:26:25.228 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 115(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:26:25.293 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:26:25.365  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:26:25.783  INFO 11904 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:26:25.785 DEBUG 11904 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:26:25.786 DEBUG 11904 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:26:25.807 DEBUG 11904 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:26:25.807  INFO 11904 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:27:57.963  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:27:58.480 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:27:58.481 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:27:58.534 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:27:58.610 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:27:58.611 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:27:58.863 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:27:58.865 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:27:58.866 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:27:58.936 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:27:58.938 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:27:58.940 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 116(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:27:59.153 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:27:59.314  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:28:00.083  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:28:00.130 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:28:00.130 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:28:00.198 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:28:00.198  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:28:05.021  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:28:05.074 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:28:05.074 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:28:05.148 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:28:05.195 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:28:05.195 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:28:05.320 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:28:05.320 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:28:05.321 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:28:05.370 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:28:05.371 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:28:05.372 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 117(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:28:05.503 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:28:05.633  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:28:06.014  INFO 11904 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:28:06.016 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:28:06.016 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:28:06.090 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:28:06.091  INFO 11904 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:28:11.950  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:28:12.001 DEBUG 11904 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:28:12.002 DEBUG 11904 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:28:12.042 DEBUG 11904 --- [http-nio-8083-exec-4] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:28:12.081 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:28:12.081 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:28:12.181 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:28:12.182 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:28:12.183 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:28:12.259 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:28:12.260 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:28:12.267 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 118(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:28:12.386 DEBUG 11904 --- [http-nio-8083-exec-4] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:28:12.561  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:28:13.230  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:28:13.303 DEBUG 11904 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:28:13.304 DEBUG 11904 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:28:13.363 DEBUG 11904 --- [http-nio-8083-exec-2] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:28:13.364  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:30:23.886  INFO 11904 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@5ad83958]}
2021-04-04 23:30:23.950 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-04 23:30:23.950 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-04 23:30:24.012 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-04 23:30:24.012 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-04 23:30:24.138 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-04 23:30:24.139 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-04 23:30:24.213 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-04 23:30:24.213 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 1
2021-04-04 23:30:24.214 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 23:30:24.214 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 23:30:24.293 DEBUG 11904 --- [http-nio-8083-exec-9] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 1
2021-04-04 23:30:24.294 DEBUG 11904 --- [http-nio-8083-exec-9] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 23:30:24.294 DEBUG 11904 --- [http-nio-8083-exec-9] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 23:30:24.375 DEBUG 11904 --- [http-nio-8083-exec-9] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 1
2021-04-04 23:30:24.456 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:30:24.456 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:30:24.547 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:30:24.548 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-04 23:30:24.548 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 44803(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-04 23:30:24.718 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-04 23:30:24.900  INFO 11904 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-04 23:30:25.247  INFO 11904 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/footer/newblog', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-04 23:30:25.248  INFO 11904 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
2021-04-04 23:30:26.730  INFO 11904 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:30:26.822 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:30:26.822 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:30:26.895 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:30:26.926 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:30:26.926 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:30:27.071 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:30:27.071 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:30:27.071 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:30:27.151 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:30:27.152 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:30:27.154 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 120(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:30:27.287 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:30:27.464  INFO 11904 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:30:27.996  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:30:28.053 DEBUG 11904 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:30:28.053 DEBUG 11904 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:30:28.105 DEBUG 11904 --- [http-nio-8083-exec-5] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:30:28.106  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:31:07.764  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:31:07.863 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:31:07.863 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:31:07.936 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:31:08.036 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:31:08.036 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:31:08.225 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:31:08.226 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:31:08.227 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:31:08.306 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:31:08.308 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:31:08.310 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 121(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:31:08.498 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:31:08.705  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:31:09.129  INFO 11904 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:31:09.131 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:31:09.131 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:31:09.178 DEBUG 11904 --- [http-nio-8083-exec-3] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:31:09.178  INFO 11904 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:31:18.857  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:31:18.927 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:31:18.928 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:31:19.028 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:31:19.107 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:31:19.107 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:31:19.371 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:31:19.372 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:31:19.372 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:31:19.450 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:31:19.450 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:31:19.451 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 122(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:31:19.699 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:31:19.914  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:31:20.378  INFO 11904 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:31:20.380 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:31:20.380 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:31:20.457 DEBUG 11904 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:31:20.458  INFO 11904 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:31:31.101  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:31:31.174 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:31:31.175 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:31:31.217 DEBUG 11904 --- [http-nio-8083-exec-5] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:31:31.253 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:31:31.254 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:31:31.527 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:31:31.528 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:31:31.528 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:31:31.639 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:31:31.640 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:31:31.641 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 123(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:31:31.922 DEBUG 11904 --- [http-nio-8083-exec-5] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:31:32.157  INFO 11904 --- [http-nio-8083-exec-5] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:31:32.766  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:31:32.868 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:31:32.868 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:31:32.954 DEBUG 11904 --- [http-nio-8083-exec-4] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:31:32.954  INFO 11904 --- [http-nio-8083-exec-4] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:31:56.249  INFO 11904 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:31:56.341 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:31:56.341 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:31:56.372 DEBUG 11904 --- [http-nio-8083-exec-7] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:31:56.413 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:31:56.413 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:31:56.641 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:31:56.642 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:31:56.642 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:31:56.717 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:31:56.719 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:31:56.720 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 124(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:31:56.886 DEBUG 11904 --- [http-nio-8083-exec-7] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:31:57.115  INFO 11904 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:31:57.523  INFO 11904 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:31:57.525 DEBUG 11904 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:31:57.525 DEBUG 11904 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:31:57.595 DEBUG 11904 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:31:57.595  INFO 11904 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:32:04.188  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:32:04.274 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:32:04.275 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:32:04.366 DEBUG 11904 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:32:04.453 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:32:04.454 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:32:04.905 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:32:04.906 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:32:04.906 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:32:05.037 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:32:05.038 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:32:05.039 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 125(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:32:05.270 DEBUG 11904 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:32:05.517  INFO 11904 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:32:06.115  INFO 11904 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:32:06.187 DEBUG 11904 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:32:06.187 DEBUG 11904 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:32:06.230 DEBUG 11904 --- [http-nio-8083-exec-8] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:32:06.231  INFO 11904 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:32:38.961  INFO 11904 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:32:39.019 DEBUG 11904 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:32:39.020 DEBUG 11904 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:32:39.052 DEBUG 11904 --- [http-nio-8083-exec-9] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:32:39.083 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:32:39.084 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:32:39.149 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:32:39.151 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:32:39.151 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:32:39.177 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:32:39.179 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:32:39.181 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 126(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:32:39.244 DEBUG 11904 --- [http-nio-8083-exec-9] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:32:39.316  INFO 11904 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:32:42.156  INFO 11904 --- [Thread-15] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-04 23:32:42.157  INFO 11904 --- [Thread-15] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-04 23:32:42.165  INFO 11904 --- [Thread-15] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-04 23:35:17.738  INFO 9320 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 9320 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-04 23:35:17.741 DEBUG 9320 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-04 23:35:17.741  INFO 9320 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-04 23:35:17.793  INFO 9320 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-04 23:35:17.793  INFO 9320 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-04 23:35:19.460  INFO 9320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8083 (http)
2021-04-04 23:35:19.484  INFO 9320 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-04 23:35:19.484  INFO 9320 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-04 23:35:19.599  INFO 9320 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-04 23:35:19.599  INFO 9320 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1806 ms
2021-04-04 23:35:20.117  WARN 9320 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-04 23:35:21.353  INFO 9320 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-04 23:35:21.458  INFO 9320 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-04 23:35:21.778  INFO 9320 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-04 23:35:21.844  INFO 9320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8083 (http) with context path ''
2021-04-04 23:35:21.851  INFO 9320 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 4.709 seconds (JVM running for 7.342)
2021-04-04 23:35:22.911  INFO 9320 --- [http-nio-8083-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-04 23:35:22.912  INFO 9320 --- [http-nio-8083-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-04 23:35:22.927  INFO 9320 --- [http-nio-8083-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2021-04-04 23:35:22.972  INFO 9320 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:35:23.039  INFO 9320 --- [http-nio-8083-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-04 23:35:23.722  INFO 9320 --- [http-nio-8083-exec-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-04 23:35:23.731 DEBUG 9320 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:35:23.753 DEBUG 9320 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:35:23.837 DEBUG 9320 --- [http-nio-8083-exec-2] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:35:23.945 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:35:23.946 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:35:24.324 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:35:24.327 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:35:24.328 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:35:24.601 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:35:24.610 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:35:24.615 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 127(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:35:24.900 DEBUG 9320 --- [http-nio-8083-exec-2] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:35:25.161  INFO 9320 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:35:26.362  INFO 9320 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:35:26.440 DEBUG 9320 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:35:26.442 DEBUG 9320 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:35:26.520 DEBUG 9320 --- [http-nio-8083-exec-1] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:35:26.522  INFO 9320 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:35:56.321  INFO 9320 --- [Thread-16] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-04 23:35:56.322  INFO 9320 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-04-04 23:35:56.328  INFO 9320 --- [Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2021-04-04 23:36:27.462  INFO 21220 --- [restartedMain] com.yi.blog.BlogApplication              : Starting BlogApplication on LAPTOP-P12KV1HJ with PID 21220 (D:\blog\lyric\target\classes started by lyric in D:\blog)
2021-04-04 23:36:27.464 DEBUG 21220 --- [restartedMain] com.yi.blog.BlogApplication              : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2021-04-04 23:36:27.464  INFO 21220 --- [restartedMain] com.yi.blog.BlogApplication              : No active profile set, falling back to default profiles: default
2021-04-04 23:36:27.525  INFO 21220 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-04 23:36:27.526  INFO 21220 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-04 23:36:28.850  INFO 21220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8083 (http)
2021-04-04 23:36:28.867  INFO 21220 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-04 23:36:28.867  INFO 21220 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2021-04-04 23:36:28.963  INFO 21220 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-04 23:36:28.963  INFO 21220 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1437 ms
2021-04-04 23:36:29.375  WARN 21220 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: com.yi.blog.entity.BlogTags.
2021-04-04 23:36:30.314  INFO 21220 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-04 23:36:30.395  INFO 21220 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-04 23:36:30.670  INFO 21220 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-04 23:36:30.719  INFO 21220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8083 (http) with context path ''
2021-04-04 23:36:30.723  INFO 21220 --- [restartedMain] com.yi.blog.BlogApplication              : Started BlogApplication in 3.64 seconds (JVM running for 5.006)
2021-04-04 23:36:33.114  INFO 21220 --- [http-nio-8083-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-04 23:36:33.114  INFO 21220 --- [http-nio-8083-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-04 23:36:33.124  INFO 21220 --- [http-nio-8083-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2021-04-04 23:36:33.163  INFO 21220 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:36:33.225  INFO 21220 --- [http-nio-8083-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-04-04 23:36:33.726  INFO 21220 --- [http-nio-8083-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-04-04 23:36:33.733 DEBUG 21220 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:36:33.749 DEBUG 21220 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:36:33.824 DEBUG 21220 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:36:33.890 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:36:33.890 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:36:34.004 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:36:34.007 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:36:34.007 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:36:34.062 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:36:34.069 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:36:34.074 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 128(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:36:34.313 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:36:34.473  INFO 21220 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:36:35.175  INFO 21220 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:36:35.243 DEBUG 21220 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:36:35.244 DEBUG 21220 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:36:35.324 DEBUG 21220 --- [http-nio-8083-exec-7] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:36:35.326  INFO 21220 --- [http-nio-8083-exec-7] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:40:31.990  INFO 21220 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@7b3c4c4]}
2021-04-04 23:40:32.075 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-04 23:40:32.076 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-04 23:40:32.133 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-04 23:40:32.133 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-04 23:40:32.260 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-04 23:40:32.260 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-04 23:40:32.323 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-04 23:40:32.324 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 1
2021-04-04 23:40:32.329 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 23:40:32.330 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 23:40:32.381 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 1
2021-04-04 23:40:32.386 DEBUG 21220 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 23:40:32.386 DEBUG 21220 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 23:40:32.449 DEBUG 21220 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 1
2021-04-04 23:40:32.484 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:40:32.485 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:40:32.538 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:40:32.544 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-04 23:40:32.544 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 44804(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-04 23:40:32.670 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-04 23:40:32.927  INFO 21220 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-04 23:40:33.213  INFO 21220 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/footer/newblog', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-04 23:40:33.214  INFO 21220 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
2021-04-04 23:40:35.063  INFO 21220 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/archives', ip='127.0.0.1', classMethod='com.yi.blog.web.ArchiveShowController.archives', args=[{}]}
2021-04-04 23:40:35.133 DEBUG 21220 --- [http-nio-8083-exec-8] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 23:40:35.134 DEBUG 21220 --- [http-nio-8083-exec-8] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 23:40:35.171 DEBUG 21220 --- [http-nio-8083-exec-8] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 1
2021-04-04 23:40:35.172 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 23:40:35.172 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 23:40:35.205 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 1
2021-04-04 23:40:35.206 DEBUG 21220 --- [http-nio-8083-exec-8] c.y.b.mapper.BlogMapper.findGroupYear    : ==>  Preparing: SELECT DATE_FORMAT( b.update_time, '%Y' ) year FROM blog b GROUP BY DATE_FORMAT( b.update_time, '%Y' ) ORDER BY year DESC 
2021-04-04 23:40:35.206 DEBUG 21220 --- [http-nio-8083-exec-8] c.y.b.mapper.BlogMapper.findGroupYear    : ==> Parameters: 
2021-04-04 23:40:35.256 DEBUG 21220 --- [http-nio-8083-exec-8] c.y.b.mapper.BlogMapper.findGroupYear    : <==      Total: 1
2021-04-04 23:40:35.257 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.findByYear   : ==>  Preparing: SELECT b.* FROM blog b WHERE DATE_FORMAT( b.update_time, '%Y' ) = ? 
2021-04-04 23:40:35.258 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.findByYear   : ==> Parameters: 2021(String)
2021-04-04 23:40:35.436 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.findByYear   : <==      Total: 1
2021-04-04 23:40:35.437  INFO 21220 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archives
2021-04-04 23:40:37.576  INFO 21220 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/34', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[34, {}]}
2021-04-04 23:40:37.644 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:40:37.645 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:40:37.694 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:40:37.744 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:40:37.744 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 34(Long)
2021-04-04 23:40:37.906 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:40:37.907 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:40:37.907 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:40:37.976 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:40:37.979 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:40:37.982 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(一)(String), # Spring:循环依赖
## 什么是循环依赖?

```java
@ComponentScan("com.yi")
public class MyConfig {

}
```
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
```java
@Component
public class TwoService {
    @Autowired
    OneService oneService;

    public TwoService() {
        System.out.println("Construct TwoService");
    }

    public void getOneService(){
        System.out.println(oneService);
    }
}
```
```java
public class Test {
    public static void main(String[] args) {
        //初始化Spring容器
        AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);

        ac.getBean(OneService.class).getTwoService();
    }
}
```
这四个代码片段，即展示了Spring当中的循环依赖。
明白循环依赖，首先要明白依赖注入。
# Spring：依赖注入
依赖注入是在Spring容器初始化的时候完成的。这期间有一个过程：以上述代码为例，初始化`AnnotationConfigApplicationContext`容器，首先读取`MyConfig`类，扫描包下的Spring管理的注解的类，然后利用这些类的信息，进行bean的初始化。
初始化bean：1、2、3、4、5、6、...N步,分好多步，接下来，看一下这些具体的步骤。
## Spring bean的初始化
普通类的初始化，简单的来说，就是.java结尾的类，在经过编译后，生成.class字节码文件，然后jvm读取这些文件，将读取的类信息，放置到方法区，等到new的时候，利用这些信息，在堆空间开辟空间，产生一个对象。
而Spring bean的初始化，要经过更繁琐的过程。
### scan:
将扫描到的由Spring管理的类，生成类信息。
### parse：
接下来，Spring底层会解析这些类的信息，将一个一个的类，生成一个一个的`BeanDefinition`接口的实现类。
这些`BeanDefinition`类中，保存的是扫描到的类的信息，信息大致有：beanSocpe，扫描到的类是不是单例的？isLazy，扫描到的类是不是标注了`@Lazy`注解，是不是懒加载？不同的信息，Spring将做不同的策略。
### put map：
接下来，把这些`BeanDefinition`对象，放置到一个map中，map的key即扫描类的类名，value即`BeanDefinition`对象。
### 实例化：
接下来，将遍历这个map，然后实例化。实例化出的对象，依然放到新的map当中(`@Lazy`、原型，等特殊对象，此刻不会实例化。
#### Spring bean的生命周期
```java
public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                beanPostProcess.end();
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var10) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn("Exception encountered during context initialization - cancelling refresh attempt: " + var10);
                }

                this.destroyBeans();
                this.cancelRefresh(var10);
                throw var10;
            } finally {
                this.resetCommonCaches();
                contextRefresh.end();
            }

        }
    }
```
`this.invokeBeanFactoryPostProcessors(beanFactory);`此行完成了Spring bean的扫描，此刻，`BeanDefinition`对象已经全部加载到了map当中。
`this.finishBeanFactoryInitialization(beanFactory);`此行完成了实例化。
bean的生命周期，即在`this.finishBeanFactoryInitialization(beanFactory);`中。
进入此方法：
```java
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
        if (beanFactory.containsBean("conversionService") && beanFactory.isTypeMatch("conversionService", ConversionService.class)) {
            beanFactory.setConversionService((ConversionService)beanFactory.getBean("conversionService", ConversionService.class));
        }

        if (!beanFactory.hasEmbeddedValueResolver()) {
            beanFactory.addEmbeddedValueResolver((strVal) -> {
                return this.getEnvironment().resolvePlaceholders(strVal);
            });
        }

        String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
        String[] var3 = weaverAwareNames;
        int var4 = weaverAwareNames.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String weaverAwareName = var3[var5];
            this.getBean(weaverAwareName);
        }

        beanFactory.setTempClassLoader((ClassLoader)null);
        beanFactory.freezeConfiguration();
        beanFactory.preInstantiateSingletons();
    }
```
`beanFactory.preInstantiateSingletons();`此行实例化所有的单例，非Lazy的。
进入此方法：
```java
public void preInstantiateSingletons() throws BeansException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Pre-instantiating singletons in " + this);
        }

        List<String> beanNames = new ArrayList(this.beanDefinitionNames);
        Iterator var2 = beanNames.iterator();

        while(true) {
            String beanName;
            Object bean;
            do {
                while(true) {
                    RootBeanDefinition bd;
                    do {
                        do {
                            do {
                                if (!var2.hasNext()) {
                                    var2 = beanNames.iterator();

                                    while(var2.hasNext()) {
                                        beanName = (String)var2.next();
                                        Object singletonInstance = this.getSingleton(beanName);
                                        if (singletonInstance instanceof SmartInitializingSingleton) {
                                            StartupStep smartInitialize = this.getApplicationStartup().start("spring.beans.smart-initialize").tag("beanName", beanName);
                                            SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton)singletonInstance;
                                            if (System.getSecurityManager() != null) {
                                                AccessController.doPrivileged(() -> {
                                                    smartSingleton.afterSingletonsInstantiated();
                                                    return null;
                                                }, this.getAccessControlContext());
                                            } else {
                                                smartSingleton.afterSingletonsInstantiated();
                                            }

                                            smartInitialize.end();
                                        }
                                    }

                                    return;
                                }

                                beanName = (String)var2.next();
                                bd = this.getMergedLocalBeanDefinition(beanName);
                            } while(bd.isAbstract());
                        } while(!bd.isSingleton());
                    } while(bd.isLazyInit());

                    if (this.isFactoryBean(beanName)) {
                        bean = this.getBean("&" + beanName);
                        break;
                    }

                    this.getBean(beanName);
                }
            } while(!(bean instanceof FactoryBean));

            FactoryBean<?> factory = (FactoryBean)bean;
            boolean isEagerInit;
            if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                SmartFactoryBean var10000 = (SmartFactoryBean)factory;
                ((SmartFactoryBean)factory).getClass();
                isEagerInit = (Boolean)AccessController.doPrivileged(var10000::isEagerInit, this.getAccessControlContext());
            } else {
                isEagerInit = factory instanceof SmartFactoryBean && ((SmartFactoryBean)factory).isEagerInit();
            }

            if (isEagerInit) {
                this.getBean(beanName);
            }
        }
    }
```
此方法，在遍历`BeanDefinition`对象，来验证这些`BeanDefinition`对象是不是可以将这些描述的bean实例化，因为有些非单例的bean，接下来不应该实例化的，所以有这么一个校验的过程。
接下来：进入此方法：`this.getBean(beanName);`
最核心的方法：
```java
protected <T> T doGetBean(String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException {
        String beanName = this.transformedBeanName(name);
        Object sharedInstance = this.getSingleton(beanName);
        Object beanInstance;
        if (sharedInstance != null && args == null) {
            if (this.logger.isTraceEnabled()) {
                if (this.isSingletonCurrentlyInCreation(beanName)) {
                    this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
                } else {
                    this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
                }
            }

            beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
        } else {
            if (this.isPrototypeCurrentlyInCreation(beanName)) {
                throw new BeanCurrentlyInCreationException(beanName);
            }

            BeanFactory parentBeanFactory = this.getParentBeanFactory();
            if (parentBeanFactory != null && !this.containsBeanDefinition(beanName)) {
                String nameToLookup = this.originalBeanName(name);
                if (parentBeanFactory instanceof AbstractBeanFactory) {
                    return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly);
                }

                if (args != null) {
                    return parentBeanFactory.getBean(nameToLookup, args);
                }

                if (requiredType != null) {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }

                return parentBeanFactory.getBean(nameToLookup);
            }

            if (!typeCheckOnly) {
                this.markBeanAsCreated(beanName);
            }

            StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate").tag("beanName", name);

            try {
                if (requiredType != null) {
                    beanCreation.tag("beanType", requiredType::toString);
                }

                RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);
                this.checkMergedBeanDefinition(mbd, beanName, args);
                String[] dependsOn = mbd.getDependsOn();
                String[] var12;
                if (dependsOn != null) {
                    var12 = dependsOn;
                    int var13 = dependsOn.length;

                    for(int var14 = 0; var14 < var13; ++var14) {
                        String dep = var12[var14];
                        if (this.isDependent(beanName, dep)) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                        }

                        this.registerDependentBean(dep, beanName);

                        try {
                            this.getBean(dep);
                        } catch (NoSuchBeanDefinitionException var31) {
                            throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", var31);
                        }
                    }
                }

                if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                } else if (mbd.isPrototype()) {
                    var12 = null;

                    Object prototypeInstance;
                    try {
                        this.beforePrototypeCreation(beanName);
                        prototypeInstance = this.createBean(beanName, mbd, args);
                    } finally {
                        this.afterPrototypeCreation(beanName);
                    }

                    beanInstance = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                } else {
                    String scopeName = mbd.getScope();
                    if (!StringUtils.hasLength(scopeName)) {
                        throw new IllegalStateException("No scope name defined for bean ��" + beanName + "'");
                    }

                    Scope scope = (Scope)this.scopes.get(scopeName);
                    if (scope == null) {
                        throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                    }

                    try {
                        Object scopedInstance = scope.get(beanName, () -> {
                            this.beforePrototypeCreation(beanName);

                            Object var4;
                            try {
                                var4 = this.createBean(beanName, mbd, args);
                            } finally {
                                this.afterPrototypeCreation(beanName);
                            }

                            return var4;
                        });
                        beanInstance = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                    } catch (IllegalStateException var30) {
                        throw new ScopeNotActiveException(beanName, scopeName, var30);
                    }
                }
            } catch (BeansException var32) {
                beanCreation.tag("exception", var32.getClass().toString());
                beanCreation.tag("message", String.valueOf(var32.getMessage()));
                this.cleanupAfterBeanCreationFailure(beanName);
                throw var32;
            } finally {
                beanCreation.end();
            }
        }

        return this.adaptBeanInstance(name, beanInstance, requiredType);
    }
```
`String beanName = this.transformedBeanName(name);`此行，先认为它是校验bean的名字是不是合法，其实还有很多其他作用；
`Object sharedInstance = this.getSingleton(beanName);`此行，是从一个map中尝试拿一下，这个bean，这个map是一个ConcurrentHashMap，是常说的Spring容器，但准确的应该叫Spring单例池，但此刻肯定是拿不到的，它为什么要拿一下呢?这里有个很关键的方法：`isSingletonCurrentlyInCreation(beanName)`
```java
String beanName = this.transformedBeanName(name);
Object sharedInstance = this.getSingleton(beanName);
Object beanInstance;
if (sharedInstance != null && args == null) {
    if (this.logger.isTraceEnabled()) {
        if (this.isSingletonCurrentlyInCreation(beanName)) {
            this.logger.trace("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
        } else {
            this.logger.trace("Returning cached instance of singleton bean '" + beanName + "'");
        }
    }

    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);
}
```
至此，先跳过这部分。
再回到doGetBean方法：来到：
```java
if (mbd.isSingleton()) {
                    sharedInstance = this.getSingleton(beanName, () -> {
                        try {
                            return this.createBean(beanName, mbd, args);
                        } catch (BeansException var5) {
                            this.destroySingleton(beanName);
                            throw var5;
                        }
                    });
                    beanInstance = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                }
```
此处，就要进行创建对象了：
```java
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {
        if (this.logger.isTraceEnabled()) {
            this.logger.trace("Creating instance of bean '" + beanName + "'");
        }

        RootBeanDefinition mbdToUse = mbd;
        Class<?> resolvedClass = this.resolveBeanClass(mbd, beanName, new Class[0]);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        try {
            mbdToUse.prepareMethodOverrides();
        } catch (BeanDefinitionValidationException var9) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(), beanName, "Validation of method overrides failed", var9);
        }

        Object beanInstance;
        try {
            beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
            if (beanInstance != null) {
                return beanInstance;
            }
        } catch (Throwable var10) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "BeanPostProcessor before instantiation of bean failed", var10);
        }

        try {
            beanInstance = this.doCreateBean(beanName, mbdToUse, args);
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Finished creating instance of bean '" + beanName + "'");
            }

            return beanInstance;
        } catch (ImplicitlyAppearedSingletonException | BeanCreationException var7) {
            throw var7;
        } catch (Throwable var8) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", var8);
        }
    }
```
上面这段代码，可以看到，就是通过`BeanDefinition`对象拿到bean的Class类的对象出来，准备创建对象，就是拿到该类的构造器等信息，来实例化。虽然是实例化了，但并不是完整的Spring bean。如下代码片段
```java
@Component
public class OneService {
    @Autowired
    TwoService twoService;

    public OneService() {
        System.out.println("Construct OneService");
    }

    @PostConstruct
    public void aa(){
        //Spring bean生命周期初始化回调方法
        System.out.println("init");
    }

    public void getTwoService(){
        System.out.println(twoService);
    }
}
```
它这一步，仅仅是创建了OneService的基本对象，@Autowired，还有AOP功能，@PostConstruct等等都没有做，仅仅是new出来了这个基本对象。
在创建的过程中，进入doCreateBean方法中：
```java
//判断是否允许循环依赖
//主要就是this.allowCircularReferences,而Spring关闭默认允许循环依赖的关键也就是这里
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }

    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}
```
## 问题：怎么关闭Spring默认的允许循环依赖
1、直接修改源码，赋值allowCircularReferences属性为false。
2、手动refresh：
```java
//1、初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext(MyConfig.class);
//2、拿到beanFactory
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
//但这样其实没有用,因为1、步已经完成了容器的初始化。
```
正确的做法：
```java
//初始化Spring容器
AnnotationConfigApplicationContext ac =
	new AnnotationConfigApplicationContext();
//先调用默认构造器，然后自己来实现其构造器中的两个关键方法：register和refresh
ac.register(MyConfig.class);
//在此关闭循环依赖
AbstractAutowireCapableBeanFactory beanFactory =
	(AbstractAutowireCapableBeanFactory) ac.getBeanFactory();
beanFactory.setAllowCircularReferences(false);
ac.refresh();
```
回到创建过程：
```java
boolean earlySingletonExposure = mbd.isSingleton() && this.allowCircularReferences && this.isSingletonCurrentlyInCreation(beanName);
if (earlySingletonExposure) {
    if (this.logger.isTraceEnabled()) {
        this.logger.trace("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    //在此进行第四次后置处理器，判断是否需要AOP
    this.addSingletonFactory(beanName, () -> {
        return this.getEarlyBeanReference(beanName, mbd, bean);
    });
}

Object exposedObject = bean;

try {
    //填充属性，也就是常常说的自动注入
    //里面会完成第五次和第六次后置处理器的调用
    this.populateBean(beanName, mbd, instanceWrapper);
    //初始化bean
    //里面会完成第七次和第八次后置处理器的调用
    exposedObject = this.initializeBean(beanName, exposedObject, mbd);
} catch (Throwable var18) {
    if (var18 instanceof BeanCreationException && beanName.equals(((BeanCreationException)var18).getBeanName())) {
        throw (BeanCreationException)var18;
    }

    throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", var18);
}
```
进入populateBean方法：
```java
if (hasInstAwareBpps) {
    if (pvs == null) {
        pvs = mbd.getPropertyValues();
    }

    PropertyValues pvsToUse;
    for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {
        InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();
        pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);
        if (pvsToUse == null) {
            if (filteredPds == null) {
                filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
            }

            pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);
            if (pvsToUse == null) {
                return;
            }
        }
    }
}
```
此行：`pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);`完成后，完成注入，比如TwoService，这时候就注入了进来。
注意，此处是个for循环，该循环在遍历后置处理器BeanPostProcessors，然后不同的BeanPostProcessor作不同的事情，比如常说的@Autowired注解，和@Resource注解的区别，这两个注解的组件走到这里的时候，会有不同的后置处理器来处理。
至此，来看开始循环注入的问题：
首先:初始化容器
```java
AnnotationConfigApplicationContext ac =
                new AnnotationConfigApplicationContext(MyConfig.class);
```
调用refresh方法：
```java
this.refresh();
```
经过：
```java
this.invokeBeanFactoryPostProcessors(beanFactory);
```
后完成扫描。
经过：
```java
this.finishBeanFactoryInitialization(beanFactory);
```
后完成bean的初始化。在：`this.finishBeanFactoryInitialization(beanFactory);`中，又进行了实例化所有的单例，非Lazy的bean：
```java
beanFactory.preInstantiateSingletons();
```
这里面，创建对象的过程是，先new出了基本的对象，然后接着进行属性填充：
```java
this.populateBean(beanName, mbd, instanceWrapper);
```
就是在此时，填充TwoService，这时候他会从容器中去拿TwoService这个bean，就是单例池中去拿，这时候肯定拿不到。
这时候就到了上面提到的：去池子中拿，拿不到，这时候有一个很关键的判断：
`if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName))`
```java
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        singletonObject = this.earlySingletonObjects.get(beanName);
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
这个判断条件是不成立的。如果该条件成立，那么就要去三级缓存中拿。
# 循环依赖类的创建流程总结：
OK，循环依赖的两个类加载的过程：
调用构造方法new出OneService对象-->如果是单例，还会把自己放到一个代表正在创建中的Set集合中，如果开启了循环依赖，就会把当前的OneService的对象放到二级缓存中-->继续走，走到populateBean要进行填充TwoService-->从容器中找，这时候找不到。此刻就有上边这个判断，是不是正在创建的bean，如果此判断成功进入，就会从三级缓存中拿出来。-->拿不到，条件也没成立，这时候，就要new出TwoService来，当然此时new出的来TwoServcie对象，也要走bean的生命周期，那么它最终还是会走到populateBean这个方法，它也会去填充属性--->从容器中找OneService的bean，拿不到，所以它又要实例化一遍OneService，但这个过程中，但是此时有个判断条件却成立了，因为OneService确实是正在创建中，它从二级缓存中拿，是能拿到的，之前的过程存进去了。这时候，拿到OneService的对象，不等于null，就给TwoService注入了。
```java
/**
 * 比如第一次加载OneService,就会把自己放入二级缓存，当OneService进行到populateBean时，就会准备注入TwoService，
 * TwoService，也一样，最后进行到populateBean，从单例池中拿OneService，拿不到，继续从三级中拿，拿不到，继续从
 * 二级中拿，拿到了，就把OneService放进三级缓存，并将二级缓存中的移除。 
 */
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
    //一级缓存：即单例池
    Object singletonObject = this.singletonObjects.get(beanName);
    if (singletonObject == null && this.isSingletonCurrentlyInCreation(beanName)) {
        //从三级缓存中拿 
        singletonObject = this.earlySingletonObjects.get(beanName);
        //如果拿不到
        if (singletonObject == null && allowEarlyReference) {
            synchronized(this.singletonObjects) {
                singletonObject = this.singletonObjects.get(beanName);
                if (singletonObject == null) {
                    singletonObject = this.earlySingletonObjects.get(beanName);
                    if (singletonObject == null) {
                        //从二级缓存中拿
                        ObjectFactory<?> singletonFactory = (ObjectFactory)this.singletonFactories.get(beanName);
                        //如果拿到了 
                        if (singletonFactory != null) {
                            singletonObject = singletonFactory.getObject();
                            //放入三级缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            //将二级缓存中的移除
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
        }
    }

    return singletonObject;
}
```
(String), 原创(String), 129(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-03 01:26:55.386(Timestamp), 2021-04-04 21:46:19.456(Timestamp), 14(Long), 1(Long), 34(Long)
2021-04-04 23:40:38.160 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:40:38.364  INFO 21220 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:40:38.913  INFO 21220 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/34', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[34, {}]}
2021-04-04 23:40:38.968 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:40:38.969 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 34(Long)
2021-04-04 23:40:39.012 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:40:39.013  INFO 21220 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:42:36.646  INFO 21220 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@59869511]}
2021-04-04 23:42:36.706 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-04 23:42:36.707 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-04 23:42:36.772 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-04 23:42:36.773 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-04 23:42:36.915 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-04 23:42:36.915 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-04 23:42:36.978 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-04 23:42:36.985 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 2
2021-04-04 23:42:36.986 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 23:42:36.986 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 23:42:37.048 DEBUG 21220 --- [http-nio-8083-exec-2] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 2
2021-04-04 23:42:37.049 DEBUG 21220 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 23:42:37.049 DEBUG 21220 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 23:42:37.118 DEBUG 21220 --- [http-nio-8083-exec-2] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 3
2021-04-04 23:42:37.186 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:42:37.186 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:42:37.259 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:42:37.260 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-04 23:42:37.261 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 44805(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-04 23:42:37.450 DEBUG 21220 --- [http-nio-8083-exec-2] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-04 23:42:37.657  INFO 21220 --- [http-nio-8083-exec-2] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-04 23:42:37.920  INFO 21220 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/footer/newblog', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-04 23:42:37.921  INFO 21220 --- [http-nio-8083-exec-10] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
2021-04-04 23:42:40.482  INFO 21220 --- [http-nio-8083-exec-8] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/35', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[35, {}]}
2021-04-04 23:42:40.531 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:42:40.531 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:42:40.581 DEBUG 21220 --- [http-nio-8083-exec-8] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:42:40.653 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:42:40.653 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 35(Long)
2021-04-04 23:42:40.700 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:42:40.701 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:42:40.701 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: null
2021-04-04 23:42:40.732 DEBUG 21220 --- [http-nio-8083-exec-8] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 0
2021-04-04 23:42:40.909 ERROR 21220 --- [http-nio-8083-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at com.yi.blog.service.impl.BlogServiceImpl.getAndConvert(BlogServiceImpl.java:66)
	at com.yi.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4b012ad9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$79b08372.getAndConvert(<generated>)
	at com.yi.blog.web.IndexController.blog(IndexController.java:74)
	at com.yi.blog.web.IndexController$$FastClassBySpringCGLIB$$7bdf2539.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.yi.blog.web.IndexController$$EnhancerBySpringCGLIB$$3875b023.blog(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-04 23:43:17.194  INFO 21220 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/blog/35', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.blog', args=[35, {}]}
2021-04-04 23:43:17.565 DEBUG 21220 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE (id = ?) 
2021-04-04 23:43:17.566 DEBUG 21220 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : ==> Parameters: 1(Integer)
2021-04-04 23:43:17.646 DEBUG 21220 --- [http-nio-8083-exec-1] com.yi.blog.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-04 23:43:17.716 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,stamp,views,appreciate,original,comments,published,recommend,create_time,update_time,blog_type_id,user_id FROM blog WHERE id=? 
2021-04-04 23:43:17.716 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : ==> Parameters: 35(Long)
2021-04-04 23:43:17.807 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-04 23:43:17.807 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:43:17.808 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:43:17.875 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:43:17.877 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE blog SET title=?, content=?, stamp=?, views=?, appreciate=?, original=?, comments=?, published=?, recommend=?, create_time=?, update_time=?, blog_type_id=?, user_id=? WHERE id=? 
2021-04-04 23:43:17.878 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : ==> Parameters: Spring(二)(String), # Spring：AOP(String), 原创(String), 2(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-04 23:42:34.043(Timestamp), 2021-04-04 23:42:34.042(Timestamp), 14(Long), 1(Long), 35(Long)
2021-04-04 23:43:18.030 DEBUG 21220 --- [http-nio-8083-exec-1] c.yi.blog.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-04 23:43:18.273  INFO 21220 --- [http-nio-8083-exec-1] com.yi.blog.aspect.LogAspect             : Result:archivedetails
2021-04-04 23:43:18.639  INFO 21220 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/comments/35', ip='127.0.0.1', classMethod='com.yi.blog.web.CommentController.comments', args=[35, {}]}
2021-04-04 23:43:18.640 DEBUG 21220 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==>  Preparing: SELECT id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id,manager_comment FROM comment WHERE (blog_id = ?) ORDER BY create_time DESC 
2021-04-04 23:43:18.641 DEBUG 21220 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : ==> Parameters: 35(Long)
2021-04-04 23:43:18.720 DEBUG 21220 --- [http-nio-8083-exec-9] c.y.b.mapper.CommentMapper.selectList    : <==      Total: 0
2021-04-04 23:43:18.720  INFO 21220 --- [http-nio-8083-exec-9] com.yi.blog.aspect.LogAspect             : Result:archivedetails :: commentList
2021-04-04 23:43:22.976  INFO 21220 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.index', args=[{}, org.apache.catalina.connector.ResponseFacade@7b3c4c4]}
2021-04-04 23:43:23.016 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT COUNT(1) FROM blog WHERE 1 = 1 
2021-04-04 23:43:23.016 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 
2021-04-04 23:43:23.062 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.m.B.selectPageByTitleAndType       : ==>  Preparing: SELECT * FROM blog WHERE 1 = 1 ORDER BY update_time DESC LIMIT ?,? 
2021-04-04 23:43:23.063 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.m.B.selectPageByTitleAndType       : ==> Parameters: 0(Long), 8(Long)
2021-04-04 23:43:24.300 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====>  Preparing: select * from blog_type where id = ? 
2021-04-04 23:43:24.300 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.mapper.BlogTypeMapper.getBlogType  : ====> Parameters: 14(Long)
2021-04-04 23:43:24.618 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.mapper.BlogTypeMapper.getBlogType  : <====      Total: 1
2021-04-04 23:43:24.619 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.m.B.selectPageByTitleAndType       : <==      Total: 2
2021-04-04 23:43:24.620 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.m.BlogTypeMapper.listBlogType      : ==>  Preparing: SELECT bt.*, b.id b_id FROM blog_type bt LEFT JOIN blog b ON bt.id = b.blog_type_id 
2021-04-04 23:43:24.620 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.m.BlogTypeMapper.listBlogType      : ==> Parameters: 
2021-04-04 23:43:25.001 DEBUG 21220 --- [http-nio-8083-exec-6] c.y.b.m.BlogTypeMapper.listBlogType      : <==      Total: 2
2021-04-04 23:43:25.002 DEBUG 21220 --- [http-nio-8083-exec-6] com.yi.blog.mapper.TagMapper.listTag     : ==>  Preparing: SELECT t.*, bt.blog_id FROM tag t LEFT JOIN blog_tags bt ON t.id = bt.tag_id 
2021-04-04 23:43:25.002 DEBUG 21220 --- [http-nio-8083-exec-6] com.yi.blog.mapper.TagMapper.listTag     : ==> Parameters: 
2021-04-04 23:43:25.067 DEBUG 21220 --- [http-nio-8083-exec-6] com.yi.blog.mapper.TagMapper.listTag     : <==      Total: 3
2021-04-04 23:43:25.142 DEBUG 21220 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==>  Preparing: SELECT id,nickname,username,password,qq,wechat,email,province,city,avatar,views,type,create_time,update_time,user_signature FROM user WHERE id=? 
2021-04-04 23:43:25.143 DEBUG 21220 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : ==> Parameters: 1(Long)
2021-04-04 23:43:25.298 DEBUG 21220 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.selectById   : <==      Total: 1
2021-04-04 23:43:25.302 DEBUG 21220 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.updateById   : ==>  Preparing: UPDATE user SET nickname=?, username=?, password=?, qq=?, wechat=?, email=?, province=?, city=?, avatar=?, views=?, create_time=?, update_time=?, user_signature=? WHERE id=? 
2021-04-04 23:43:25.302 DEBUG 21220 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.updateById   : ==> Parameters: lyric(String), lyric(String), 96e79218965eb72c92a549dd5a330112(String), 2044619214(String), 17805428855(String), lyric0926@163.com(String), 浙江(String), 杭州(String), /images/user.jpg(String), 44806(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-04-02 00:55:48.5(Timestamp), 你生命中最美好的一天，就是你决定让你的人生属于你自己的那一天。(String), 1(Long)
2021-04-04 23:43:25.466 DEBUG 21220 --- [http-nio-8083-exec-6] c.yi.blog.mapper.UserMapper.updateById   : <==    Updates: 1
2021-04-04 23:43:25.756  INFO 21220 --- [http-nio-8083-exec-6] com.yi.blog.aspect.LogAspect             : Result:index
2021-04-04 23:43:26.001  INFO 21220 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : requestLog:RequestLog{uri='http://yi.com:8083/footer/newblog', ip='127.0.0.1', classMethod='com.yi.blog.web.IndexController.newblogs', args=[{}]}
2021-04-04 23:43:26.001  INFO 21220 --- [http-nio-8083-exec-3] com.yi.blog.aspect.LogAspect             : Result:_fragments :: newblogList
