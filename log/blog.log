2021-11-25 14:30:43.333  INFO 21684 --- [restartedMain] c.yi.enhancement.EnhancementApplication  : Starting EnhancementApplication using Java 1.8.0_261 on LAPTOP-P12KV1HJ with PID 21684 (D:\blog-enhancement\target\classes started by lyric in D:\blog-enhancement)
2021-11-25 14:30:43.340 DEBUG 21684 --- [restartedMain] c.yi.enhancement.EnhancementApplication  : Running with Spring Boot v2.5.0, Spring v5.3.7
2021-11-25 14:30:43.341  INFO 21684 --- [restartedMain] c.yi.enhancement.EnhancementApplication  : No active profile set, falling back to default profiles: default
2021-11-25 14:30:43.394  INFO 21684 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in D:\maven-repository\blog-enhancement-maven\blog-enhancement-repository\com\sun\xml\bind\jaxb-impl\2.2.3-1\jaxb-impl-2.2.3-1.jar referenced one or more files that do not exist: file:/D:/maven-repository/blog-enhancement-maven/blog-enhancement-repository/com/sun/xml/bind/jaxb-impl/2.2.3-1/jaxb-api.jar,file:/D:/maven-repository/blog-enhancement-maven/blog-enhancement-repository/com/sun/xml/bind/jaxb-impl/2.2.3-1/activation.jar,file:/D:/maven-repository/blog-enhancement-maven/blog-enhancement-repository/com/sun/xml/bind/jaxb-impl/2.2.3-1/jsr173_1.0_api.jar,file:/D:/maven-repository/blog-enhancement-maven/blog-enhancement-repository/com/sun/xml/bind/jaxb-impl/2.2.3-1/jaxb1-impl.jar
2021-11-25 14:30:43.395  INFO 21684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-11-25 14:30:43.395  INFO 21684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-11-25 14:30:44.934  INFO 21684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8070 (http)
2021-11-25 14:30:44.944  INFO 21684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-11-25 14:30:44.944  INFO 21684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-11-25 14:30:45.029  INFO 21684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-11-25 14:30:45.029  INFO 21684 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1632 ms
2021-11-25 14:30:45.668  WARN 21684 --- [restartedMain] c.b.m.core.metadata.TableInfoHelper      : Can not find table primary key in Class: "com.yi.enhancement.model.entity.UserAvatar".
2021-11-25 14:30:47.641  INFO 21684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-11-25 14:30:48.438  INFO 21684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-11-25 14:30:49.704  INFO 21684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8070 (http) with context path ''
2021-11-25 14:30:50.383  INFO 21684 --- [restartedMain] c.yi.enhancement.EnhancementApplication  : Started EnhancementApplication in 8.203 seconds (JVM running for 10.626)
2021-11-25 14:30:50.384  INFO 21684 --- [restartedMain] o.s.b.a.ApplicationAvailabilityBean      : Application availability state LivenessState changed to CORRECT
2021-11-25 14:30:50.388  INFO 21684 --- [restartedMain] o.s.b.a.ApplicationAvailabilityBean      : Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-11-25 14:32:14.681  INFO 21684 --- [http-nio-8070-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-11-25 14:32:14.682  INFO 21684 --- [http-nio-8070-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-11-25 14:32:14.683  INFO 21684 --- [http-nio-8070-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-11-25 14:32:14.780  INFO 21684 --- [http-nio-8070-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-11-25 14:32:15.012  INFO 21684 --- [http-nio-8070-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-11-25 14:32:15.020 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.A.pageArticleDTOWeb_mpCount      : ==>  Preparing: SELECT COUNT(*) FROM article WHERE deleted = 0
2021-11-25 14:32:15.042 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.A.pageArticleDTOWeb_mpCount      : ==> Parameters: 
2021-11-25 14:32:15.071 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.A.pageArticleDTOWeb_mpCount      : <==      Total: 1
2021-11-25 14:32:15.080 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.ArticleMapper.pageArticleDTOWeb  : ==>  Preparing: SELECT id, title, create_time, update_time FROM article where deleted = 0 ORDER BY update_time DESC LIMIT ?
2021-11-25 14:32:15.081 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.ArticleMapper.pageArticleDTOWeb  : ==> Parameters: 8(Long)
2021-11-25 14:32:15.092 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.ArticleMapper.pageArticleDTOWeb  : <==      Total: 4
2021-11-25 14:32:15.099 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:32:15.100 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:32:15.108 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:32:15.114 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:32:15.114 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:32:15.123 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:32:15.128 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:32:15.128 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:32:15.138 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:32:15.172 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.updateById       : ==>  Preparing: UPDATE user SET qq=?, email=?, wechat=?, avatar=?, banner=?, nickname=?, user_signature=?, views=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2021-11-25 14:32:15.177 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.updateById       : ==> Parameters: 2044619214(String), lyric0926@163.com(String), 17805428855(String), https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-07-11/6a879a71-ca69-4ef3-a5f7-e8c6f67dd0b7Screenshot_20210424_204530.jpg(String), https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-09-16/fdb78008-7df7-4224-8d3a-c97268b9b066wallhaven-v95om8.jpg(String), lyric(String), 许多事情我们的确无能为力。
但即使如此我们也不该因此消沉不是吗？
乐观起来，忘记伤痛继续前行远比一次又一次揭开伤疤要好得多！(String), 8118(Integer), 2020-09-02 15:16:51.0(Timestamp), 2021-11-25 14:32:15.172(Timestamp), 1(Long)
2021-11-25 14:32:15.192 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.updateById       : <==    Updates: 1
2021-11-25 14:32:15.199 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.T.listTechnicalSupportVo         : ==>  Preparing: SELECT * FROM technical_support where deleted = 0
2021-11-25 14:32:15.200 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.T.listTechnicalSupportVo         : ==> Parameters: 
2021-11-25 14:32:15.209 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.T.listTechnicalSupportVo         : <==      Total: 3
2021-11-25 14:32:18.101 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:32:18.101 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:32:18.109 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:32:18.111 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:32:18.111 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:32:18.124 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:32:18.132 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:32:18.132 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 3(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:32:18.148 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:32:18.210 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:32:18.210 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:32:18.217 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:32:18.219 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:32:18.219 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:32:18.227 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:32:18.229 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:32:18.230 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:32:18.238 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:32:18.244 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:32:18.244 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:32:18.251 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:32:18.424 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:32:18.425 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:32:18.432 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:44:24.055 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:44:24.056 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:44:24.064 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:44:24.066 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:44:24.066 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:44:24.075 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:44:24.078 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:44:24.078 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 4(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:44:24.093 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:44:24.096 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:44:24.097 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:44:24.107 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:44:24.108 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:44:24.108 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:44:24.116 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:44:24.117 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:44:24.118 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:44:24.125 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:44:24.126 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:44:24.126 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:44:24.133 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:44:24.403 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:44:24.403 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:44:24.410 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:46:15.505 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:46:15.506 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:46:15.514 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:46:15.514 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:46:15.514 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:46:15.526 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:46:15.528 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:46:15.528 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 5(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:46:15.575 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:46:15.577 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:46:15.577 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:46:15.595 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:46:15.596 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:46:15.596 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:46:15.619 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:46:15.619 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:46:15.619 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:46:15.635 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:46:15.637 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:46:15.637 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:46:15.650 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:46:15.853 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:46:15.854 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:46:15.868 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:51:57.950 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:51:57.950 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:51:57.958 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:51:57.959 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:51:57.959 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:51:57.970 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:51:57.972 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:51:57.974 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 6(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:51:57.990 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:51:57.992 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:51:57.992 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:51:57.999 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:51:58.000 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:51:58.001 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:51:58.015 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:51:58.015 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:51:58.016 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:51:58.024 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:51:58.025 DEBUG 21684 --- [http-nio-8070-exec-9] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:51:58.026 DEBUG 21684 --- [http-nio-8070-exec-9] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:51:58.033 DEBUG 21684 --- [http-nio-8070-exec-9] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:51:58.230 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:51:58.231 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:51:58.237 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:52:38.858 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:52:38.858 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:52:38.866 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:52:38.867 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:52:38.867 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:38.874 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:52:38.875 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:52:38.876 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 7(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:52:38.893 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:52:38.895 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:52:38.895 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:52:38.902 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:52:38.902 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:52:38.902 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:38.912 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:52:38.913 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:52:38.913 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:52:38.921 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:52:38.922 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:52:38.922 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:38.929 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:52:39.101 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:52:39.102 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:39.118 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:52:50.116 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:52:50.116 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:52:50.123 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:52:50.124 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:52:50.124 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:50.133 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:52:50.135 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:52:50.136 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 8(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:52:50.152 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:52:50.153 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:52:50.153 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:52:50.160 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:52:50.161 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:52:50.161 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:50.171 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:52:50.171 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:52:50.171 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:52:50.178 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:52:50.179 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:52:50.179 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:50.186 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:52:50.390 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:52:50.391 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:50.398 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:52:51.062 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:52:51.062 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:52:51.069 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:52:51.070 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:52:51.070 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:51.077 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:52:51.078 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:52:51.079 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 9(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:52:51.093 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:52:51.095 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:52:51.096 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:52:51.105 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:52:51.106 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:52:51.106 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:51.114 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:52:51.115 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:52:51.116 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:52:51.125 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:52:51.125 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:52:51.126 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:51.136 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:52:51.341 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:52:51.342 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:52:51.353 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:53:38.758 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:53:38.758 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:53:38.769 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:53:38.769 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:53:38.770 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:53:38.777 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:53:38.778 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:53:38.779 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 10(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:53:38.795 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:53:38.796 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:53:38.797 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:53:38.804 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:53:38.805 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:53:38.805 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:53:38.817 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:53:38.818 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:53:38.818 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:53:38.825 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:53:38.826 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:53:38.826 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:53:38.833 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:53:39.056 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:53:39.057 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:53:39.068 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:54:23.541 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:54:23.541 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:54:23.548 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:54:23.548 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:54:23.549 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:54:23.558 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:54:23.561 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:54:23.561 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 11(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:54:23.581 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:54:23.584 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:54:23.584 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:54:23.591 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:54:23.591 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:54:23.591 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:54:23.598 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:54:23.599 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:54:23.599 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:54:23.607 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:54:23.608 DEBUG 21684 --- [http-nio-8070-exec-7] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:54:23.609 DEBUG 21684 --- [http-nio-8070-exec-7] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:54:23.615 DEBUG 21684 --- [http-nio-8070-exec-7] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:54:23.847 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:54:23.848 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:54:23.856 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 14:54:55.195 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 14:54:55.195 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 14:54:55.202 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 14:54:55.203 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:54:55.203 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:54:55.210 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:54:55.212 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 14:54:55.214 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 12(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 14:54:55.228 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 14:54:55.230 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:54:55.230 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 14:54:55.237 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 14:54:55.238 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 14:54:55.238 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:54:55.246 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 14:54:55.247 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 14:54:55.247 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 14:54:55.256 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 14:54:55.256 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 14:54:55.257 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:54:55.263 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 14:54:55.449 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 14:54:55.450 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 14:54:55.458 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:12:22.683 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:12:22.684 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:12:22.692 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:12:22.693 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:12:22.693 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:22.700 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:12:22.701 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:12:22.701 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 13(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:12:22.716 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:12:22.718 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:12:22.719 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:12:22.725 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:12:22.726 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:12:22.726 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:22.734 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:12:22.734 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:12:22.734 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:12:22.743 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:12:22.744 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:12:22.744 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:22.751 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:12:23.125 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:12:23.126 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:23.133 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:12:27.066 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:12:27.067 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:12:27.074 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:12:27.075 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:12:27.075 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:27.082 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:12:27.083 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:12:27.083 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 14(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:12:27.098 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:12:27.101 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:12:27.102 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:12:27.112 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:12:27.113 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:12:27.114 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:27.123 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:12:27.123 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:12:27.123 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:12:27.130 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:12:27.131 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:12:27.131 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:27.139 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:12:27.321 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:12:27.322 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:27.333 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:12:34.796 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:12:34.796 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:12:34.804 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:12:34.804 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:12:34.805 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:34.813 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:12:34.814 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:12:34.816 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 15(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:12:34.832 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:12:34.833 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:12:34.834 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:12:34.841 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:12:34.841 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:12:34.842 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:34.850 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:12:34.851 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:12:34.851 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:12:34.860 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:12:34.861 DEBUG 21684 --- [http-nio-8070-exec-3] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:12:34.861 DEBUG 21684 --- [http-nio-8070-exec-3] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:34.867 DEBUG 21684 --- [http-nio-8070-exec-3] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:12:35.063 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:12:35.064 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:35.075 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:12:45.734 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:12:45.734 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:12:45.741 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:12:45.742 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:12:45.742 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:45.749 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:12:45.750 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:12:45.750 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 16(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:12:45.765 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:12:45.767 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:12:45.768 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:12:45.774 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:12:45.774 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:12:45.775 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:45.781 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:12:45.782 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:12:45.782 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:12:45.791 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:12:45.791 DEBUG 21684 --- [http-nio-8070-exec-9] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:12:45.792 DEBUG 21684 --- [http-nio-8070-exec-9] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:45.798 DEBUG 21684 --- [http-nio-8070-exec-9] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:12:46.003 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:12:46.003 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:12:46.013 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:13:35.791 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:13:35.791 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:13:35.799 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:13:35.799 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:13:35.800 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:13:35.807 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:13:35.809 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:13:35.810 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 17(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:13:35.826 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:13:35.827 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:13:35.827 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:13:35.834 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:13:35.835 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:13:35.835 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:13:35.842 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:13:35.844 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:13:35.844 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:13:35.851 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:13:35.851 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:13:35.852 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:13:35.859 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:13:36.023 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:13:36.024 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:13:36.033 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:13:51.282 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:13:51.283 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:13:51.291 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:13:51.292 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:13:51.292 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:13:51.302 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:13:51.304 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:13:51.304 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 18(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:13:51.322 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:13:51.327 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:13:51.328 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:13:51.336 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:13:51.336 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:13:51.337 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:13:51.344 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:13:51.345 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:13:51.345 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:13:51.353 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:13:51.354 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:13:51.354 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:13:51.361 DEBUG 21684 --- [http-nio-8070-exec-2] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:13:51.576 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:13:51.577 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:13:51.595 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:13:59.966 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:13:59.967 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:14:00.006 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:14:00.006 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:14:00.006 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:14:00.014 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:14:00.017 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:14:00.018 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 19(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:14:00.033 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:14:00.034 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:14:00.035 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:14:00.042 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:14:00.043 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:14:00.043 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:14:00.051 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:14:00.052 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:14:00.052 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:14:00.059 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:14:00.059 DEBUG 21684 --- [http-nio-8070-exec-1] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:14:00.060 DEBUG 21684 --- [http-nio-8070-exec-1] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:14:00.067 DEBUG 21684 --- [http-nio-8070-exec-1] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:14:00.296 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:14:00.297 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:14:00.304 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:14:12.479 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:14:12.479 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:14:12.487 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:14:12.488 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:14:12.489 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:14:12.496 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:14:12.497 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:14:12.498 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 20(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:14:12.513 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:14:12.514 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:14:12.514 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:14:12.521 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:14:12.522 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:14:12.522 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:14:12.544 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:14:12.545 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:14:12.546 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:14:12.552 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:14:12.553 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:14:12.553 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:14:12.559 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:14:12.760 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:14:12.761 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:14:12.768 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:20:26.910 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:20:26.910 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:20:26.917 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:20:26.918 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:20:26.918 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:20:26.926 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:20:26.927 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:20:26.928 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 27(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:20:26.945 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:20:26.946 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:20:26.947 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:20:26.959 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:20:26.959 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:20:26.960 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:20:26.973 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:20:26.973 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:20:26.974 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:20:26.987 DEBUG 21684 --- [http-nio-8070-exec-5] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:20:26.988 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:20:26.988 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:20:27.001 DEBUG 21684 --- [http-nio-8070-exec-5] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:20:27.195 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:20:27.195 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:20:27.203 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:20:53.728 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:20:53.728 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:20:53.735 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:20:53.735 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:20:53.735 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:20:53.742 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:20:53.743 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:20:53.743 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 28(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:20:53.760 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:20:53.761 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:20:53.761 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:20:53.767 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:20:53.768 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:20:53.768 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:20:53.775 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:20:53.775 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:20:53.775 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:20:53.782 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:20:53.783 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:20:53.783 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:20:53.789 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:20:53.992 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:20:53.992 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:20:53.999 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:25:46.152 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:25:46.152 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:25:46.161 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:25:46.162 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:25:46.162 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:25:46.169 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:25:46.170 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:25:46.171 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 29(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:25:46.187 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:25:46.188 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:25:46.189 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:25:46.196 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:25:46.196 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:25:46.197 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:25:46.204 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:25:46.204 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:25:46.204 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:25:46.212 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:25:46.212 DEBUG 21684 --- [http-nio-8070-exec-10] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:25:46.212 DEBUG 21684 --- [http-nio-8070-exec-10] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:25:46.218 DEBUG 21684 --- [http-nio-8070-exec-10] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:25:46.407 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:25:46.409 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:25:46.416 DEBUG 21684 --- [http-nio-8070-exec-7] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:26:00.926 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:26:00.926 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:26:00.935 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:26:00.935 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:26:00.935 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:26:00.950 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:26:00.951 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:26:00.952 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 30(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:26:00.981 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:26:00.983 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:26:00.983 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:26:01.006 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:26:01.006 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:26:01.006 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:26:01.019 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:26:01.019 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:26:01.019 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:26:01.026 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:26:01.026 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:26:01.026 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:26:01.034 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:26:01.219 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:26:01.219 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:26:01.227 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:26:23.422 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:26:23.423 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:26:23.429 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:26:23.430 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:26:23.430 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:26:23.436 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:26:23.437 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:26:23.437 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 31(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:26:23.454 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:26:23.456 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:26:23.456 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:26:23.463 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:26:23.464 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:26:23.464 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:26:23.472 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:26:23.473 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:26:23.473 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:26:23.484 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:26:23.485 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:26:23.485 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:26:23.491 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:26:23.673 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:26:23.673 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:26:23.681 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:27:57.752 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:27:57.752 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:27:57.763 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:27:57.763 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:27:57.763 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:27:57.772 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:27:57.773 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:27:57.773 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 32(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:27:57.788 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:27:57.788 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:27:57.789 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:27:57.795 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:27:57.796 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:27:57.796 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:27:57.803 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:27:57.803 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:27:57.803 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:27:57.814 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:27:57.815 DEBUG 21684 --- [http-nio-8070-exec-1] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:27:57.816 DEBUG 21684 --- [http-nio-8070-exec-1] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:27:57.823 DEBUG 21684 --- [http-nio-8070-exec-1] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:27:58.041 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:27:58.042 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:27:58.058 DEBUG 21684 --- [http-nio-8070-exec-9] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:28:05.637 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:28:05.638 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:28:05.645 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:28:05.646 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:28:05.647 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:28:05.655 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:28:05.656 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:28:05.656 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 33(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:28:05.671 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:28:05.672 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:28:05.672 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:28:05.680 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:28:05.681 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:28:05.681 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:28:05.690 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:28:05.691 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:28:05.691 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:28:05.707 DEBUG 21684 --- [http-nio-8070-exec-8] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:28:05.708 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:28:05.708 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:28:05.715 DEBUG 21684 --- [http-nio-8070-exec-8] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:28:05.914 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:28:05.914 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:28:05.921 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:28:45.909 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:28:45.909 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:28:45.916 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:28:45.916 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:28:45.917 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:28:45.924 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:28:45.925 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:28:45.925 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 34(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:28:45.940 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:28:45.941 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:28:45.942 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:28:45.948 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:28:45.949 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:28:45.949 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:28:45.955 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:28:45.956 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:28:45.956 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:28:45.963 DEBUG 21684 --- [http-nio-8070-exec-4] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:28:45.963 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:28:45.964 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:28:45.970 DEBUG 21684 --- [http-nio-8070-exec-4] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:28:46.172 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:28:46.172 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:28:46.179 DEBUG 21684 --- [http-nio-8070-exec-1] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:30:57.294 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:30:57.294 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:30:57.302 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:30:57.302 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:30:57.303 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:30:57.309 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:30:57.310 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:30:57.311 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 35(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:30:57.325 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:30:57.327 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:30:57.327 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:30:57.333 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:30:57.334 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:30:57.334 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:30:57.342 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:30:57.343 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:30:57.343 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:30:57.350 DEBUG 21684 --- [http-nio-8070-exec-3] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:30:57.350 DEBUG 21684 --- [http-nio-8070-exec-3] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:30:57.350 DEBUG 21684 --- [http-nio-8070-exec-3] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:30:57.357 DEBUG 21684 --- [http-nio-8070-exec-3] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:30:57.562 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:30:57.562 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:30:57.569 DEBUG 21684 --- [http-nio-8070-exec-10] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
2021-11-25 15:31:03.881 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==>  Preparing: SELECT * FROM user WHERE deleted = 0 AND id = ?
2021-11-25 15:31:03.882 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : ==> Parameters: 1(Long)
2021-11-25 15:31:03.892 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.UserMapper.getUser          : <==      Total: 1
2021-11-25 15:31:03.894 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:31:03.894 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:31:03.901 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:31:03.902 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE article SET title=?, content=?, stamp=?, comments=?, status=?, recommend=?, appreciate=?, views=?, create_time=?, update_time=?, category_id=? WHERE id=? AND deleted=0
2021-11-25 15:31:03.903 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : ==> Parameters: IO流(String), # 一、IO流的概念

* I/O 即输入Input/ 输出Output的缩写，其实就是计算机调度把各个存储中（包括内存和外部存储）的数据写入写出的过程；
* java中用“流（stream）”来抽象表示这么一个写入写出的功能，封装成一个“类”，都放在java.io这个包里面。
# 二、“流”是什么？
> 通过“流”的形式允许java程序使用相同的方式来访问不同的输入/输出源。stream是从起源（source）到接收的（sink）的有序数据。我们这里把输入/输出源对比成“水桶”，那么流就是“管道”，这个“管道”的粗细、单向性等属性也就是区分了不同“流”的特性。

![image.png](https://yi-blog.oss-cn-hangzhou.aliyuncs.com/2021-11-25/26d46112-01a0-4ccf-8a4e-05828238d9e5.png)

作者：李白写代码

链接：https://zhuanlan.zhihu.com/p/98094713

来源：知乎(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 36(Integer), 2021-11-25 14:28:36.0(Timestamp), 2021-11-25 14:30:03.0(Timestamp), 1446769938234671105(Long), 1463756487044231169(Long)
2021-11-25 15:31:03.920 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.updateById    : <==    Updates: 1
2021-11-25 15:31:03.921 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==>  Preparing: SELECT t1.id, t1.NAME, COUNT(t2.category_id) article_counts FROM category t1 LEFT JOIN article t2 ON t1.id = t2.category_id and t2.deleted = 0 where t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:31:03.921 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : ==> Parameters: 
2021-11-25 15:31:03.928 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.m.CategoryMapper.listCategoryVo    : <==      Total: 2
2021-11-25 15:31:03.928 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,content,first_picture,stamp,comments,original,status,recommend,appreciate,views,create_time,update_time,category_id,user_id,deleted FROM article WHERE id=? AND deleted=0
2021-11-25 15:31:03.928 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:31:03.935 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.ArticleMapper.selectById    : <==      Total: 1
2021-11-25 15:31:03.936 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==>  Preparing: SELECT t1.*, COUNT(t2.article_id) article_counts FROM tag t1 LEFT JOIN article_tag_relation t2 ON t1.id = t2.tag_id and t2.deleted = 0 WHERE t1.deleted = 0 GROUP BY t1.id
2021-11-25 15:31:03.936 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : ==> Parameters: 
2021-11-25 15:31:03.943 DEBUG 21684 --- [http-nio-8070-exec-6] c.y.e.mapper.TagMapper.listTagVo         : <==      Total: 4
2021-11-25 15:31:03.943 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==>  Preparing: SELECT t1.article_id, t1.tag_id, t2.NAME tag_name FROM `article_tag_relation` t1 LEFT JOIN tag t2 ON t1.tag_id = t2.id where t1.deleted = 0 and t1.article_id = ?
2021-11-25 15:31:03.943 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:31:03.952 DEBUG 21684 --- [http-nio-8070-exec-6] .e.m.A.listArticleTagRelationByArticleId : <==      Total: 1
2021-11-25 15:31:04.190 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==>  Preparing: SELECT id, avatar, nickname, content, email, website, manager_comment, article_id, parent_comment_id, browser_name, browser_version, os_name, create_time, deleted FROM comment WHERE article_id = ? AND deleted = 0 ORDER BY create_time desc
2021-11-25 15:31:04.190 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : ==> Parameters: 1463756487044231169(Long)
2021-11-25 15:31:04.198 DEBUG 21684 --- [http-nio-8070-exec-2] c.y.e.m.C.listCommentByArticleId         : <==      Total: 0
